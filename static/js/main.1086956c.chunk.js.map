{"version":3,"sources":["stores/preferences.js","components/PlaylistTable.js","components/PlaylistImporter.js","stores/playlists.js","components/BeatSaverBrowser.js","App.js","reportWebVitals.js","index.js"],"names":["bplistSongKeys","UserPreferencesStore","_playlistsHorizontalMode","_playlistColumnsToShow","undefined","makeAutoObservable","this","store","get","output","forEach","key","initColumnsToShow","flag","set","columns","Object","entries","filter","map","length","keys","UserPreferencesContext","createContext","getColText","song","difficulties","join","camelCaseToWords","text","result","replace","charAt","toUpperCase","slice","DraggableRow","idx","playlistId","onRemoveSongClick","columnsToShow","useContext","getPlaylistColumnNamesToShow","draggableId","hash","index","provided","snapshot","Table","Row","isSelectable","height","ref","innerRef","draggableProps","dragHandleProps","Cell","flexBasis","flexGrow","DragHandleHorizontalIcon","Avatar","src","coverURL","size","TextCell","DeleteIcon","onClick","observer","playlist","console","log","useState","editTextData","setEditTextData","showDeleteConfirmation","setShowDeleteConfirmation","showAddDialog","setShowAddDialog","showAddSongLoader","setShowAddSongLoader","addSongError","setAddSongError","songKeyInput","setSongKeyInput","songToRemove","setSongToRemove","title","titleInput","setTitleInput","author","authorInput","setAuthorInput","style","width","display","flexDirection","alignItems","border","marginTop","Pane","image","name","callback","inputElement","document","createElement","type","accept","multiple","addEventListener","dispatchEvent","MouseEvent","openFileDialog","event","baseURL","reader","FileReader","file","target","files","readAsDataURL","onload","Heading","margin","TextInput","value","onChange","e","Tooltip","content","Button","intent","EditIcon","FloppyDiskIcon","bplistJson","asBplistJson","element","setAttribute","encodeURIComponent","JSON","stringify","body","appendChild","click","removeChild","exportPlaylist","AddIcon","Dialog","isShown","onCloseComplete","onConfirm","delete","confirmLabel","removeSong","shouldCloseOnOverlayClick","a","addSongByKey","Spinner","isInvalid","maxWidth","Head","HeaderCell","Body","droppableId","id","flex","minHeight","songs","placeholder","PlaylistImporter","onImportClick","FilePicker","Promise","all","split","parse","data","playlists","getMapByHash","fetch","json","getMapByKey","songKey","getBeatSaverMapList","page","BeatSaverBrowserStore","_songsList","fetchSongs","resp","docs","BeatSaverBrowserStoreContext","beatSaverSongCache","songCache","hashes","rateLimitDelay","missingHashes","res","setTimeout","retrieveSongData","PlaylistStore","addPlaylistFromBplistData","retrieveMultipleSongData","Playlist","getNewId","playlistTitle","playlistAuthor","appendPlaylist","savedPlaylists","push","allIds","p","newId","uuidv4","includes","saveAllPlaylists","indexOf","splice","playlistsJson","asJson","PlaylistStoreContext","savedPlaylist","_id","_image","_title","_author","_songs","Song","deletePlaylist","songData","find","manualAddSongData","s","savedSong","beatSaverSongObject","getSongDataByHash","metadata","songName","songAuthorName","levelAuthorName","description","levelid","characteristics","flatMap","characteristic","songStore","songsList","useEffect","isDropDisabled","preferences","horizontalMode","playlistHorizontalMode","playlistColumnsToShow","playlistStore","beatSaverBrowserSongStore","filteredColumns","justifyContent","paddingLeft","paddingRight","paddingTop","paddingBottom","backgroundColor","color","minWidth","padding","Checkbox","label","checked","setPlaylistColumnToShow","promises","out","createNewPlaylist","onDragEnd","destination","source","destIdx","sourceIdx","destinationPlaylist","songToAdd","addSongBySongData","sourcePlaylist","songToMove","insertSongAtIdx","playlistToMove","movePlaylist","provider","playlistKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.1086956c.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst bplistSongKeys = [\"name\", \"description\", \"difficulties\"];\n\nconst initColumnsToShow = () => {\n  const output = {};\n  bplistSongKeys.forEach((key) => (output[key] = false));\n  return output;\n};\n\nexport class UserPreferencesStore {\n  _playlistsHorizontalMode = false;\n  _playlistColumnsToShow = undefined;\n\n  constructor() {\n    makeAutoObservable(this);\n    this._playlistsHorizontalMode =\n      store.get(\"playlistHorizontalMode\") || false;\n    this._playlistColumnsToShow =\n      store.get(\"playlistColumnsToShow\") || initColumnsToShow();\n  }\n\n  get playlistHorizontalMode() {\n    return this._playlistsHorizontalMode;\n  }\n  set playlistHorizontalMode(flag) {\n    this._playlistsHorizontalMode = flag;\n    store.set(\"playlistHorizontalMode\", flag);\n  }\n\n  get playlistColumnsToShow() {\n    return this._playlistColumnsToShow;\n  }\n  set playlistColumnsToShow(columns) {\n    this._playlistColumnsToShow = columns;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow); // probably can autorun the save function\n  }\n\n  setPlaylistColumnToShow(key, flag) {\n    this._playlistColumnsToShow[key] = flag;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow);\n  }\n  getPlaylistColumnNamesToShow() {\n    const columns = Object.entries(this._playlistColumnsToShow)\n      .filter(([_, value]) => value)\n      .map(([key, _]) => key);\n    if (columns.length === 0) {\n      return Object.keys(this._playlistColumnsToShow);\n    }\n    return columns;\n  }\n}\n\nexport const UserPreferencesContext = createContext();\n","import React, { useState, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Table,\n  Avatar,\n  Heading,\n  DragHandleHorizontalIcon,\n  FloppyDiskIcon,\n  EditIcon,\n  Tooltip,\n  TextInput,\n  Pane,\n  Button,\n  DeleteIcon,\n  Dialog,\n  AddIcon,\n  Spinner,\n} from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\n\nconst getColText = (key, song) => {\n  if (!song) {\n    return \"\";\n  }\n  // special cases\n  switch (key) {\n    case \"difficulties\":\n      return Object.entries(song.difficulties)\n        .filter(([key, value]) => value)\n        .map(([key, _]) => key)\n        .join(\",\");\n    default:\n      break;\n  }\n\n  // very dirty way to parse out the relevant col data\n  if (key in song) {\n    return song[key];\n  }\n};\n\nconst camelCaseToWords = (text) => {\n  var result = text.replace(/([A-Z])/g, \" $1\");\n  var finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n  return finalResult;\n};\n\nconst DraggableRow = ({ idx, playlistId, song, onRemoveSongClick }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n  return (\n    <Draggable\n      key={song.hash}\n      draggableId={`${playlistId}-${song.hash}`}\n      index={idx}\n    >\n      {(provided, snapshot) => (\n        <Table.Row\n          key={song.hash}\n          isSelectable\n          height={42}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Table.Cell flexBasis={40} flexGrow={0}>\n            <DragHandleHorizontalIcon />\n          </Table.Cell>\n          <Table.Cell flexBasis={60} flexGrow={0}>\n            <Avatar src={song.coverURL} size={40} />\n          </Table.Cell>\n          {columnsToShow.map((key) => (\n            <Table.TextCell key={key}>{getColText(key, song)}</Table.TextCell>\n          ))}\n          <Table.Cell flexBasis={35} flexGrow={0}>\n            <DeleteIcon onClick={() => onRemoveSongClick(song)} />\n          </Table.Cell>\n        </Table.Row>\n      )}\n    </Draggable>\n  );\n};\n\nconst exportPlaylist = (playlist) => {\n  const bplistJson = playlist.asBplistJson();\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(bplistJson))\n  );\n  element.setAttribute(\"download\", `${playlist.title}.bplist`);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nfunction openFileDialog(callback) {\n  // this function must be called from  a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement(\"input\");\n  // Set its type to file\n  inputElement.type = \"file\";\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  inputElement.accept = \"image/*\";\n  // Accept multiple files\n  inputElement.multiple = false;\n  // set onchange event to call callback when user has selected file\n  inputElement.addEventListener(\"change\", callback);\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent(\"click\"));\n}\n\n// TODO: handle json types seperately\nconst PlaylistTable = ({ playlist }) => {\n  console.log(playlist, \"rerends.\");\n  const [editTextData, setEditTextData] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAddSongLoader, setShowAddSongLoader] = useState(false);\n  const [addSongError, setAddSongError] = useState(false);\n  const [songKeyInput, setSongKeyInput] = useState(undefined);\n  const [songToRemove, setSongToRemove] = useState(null);\n\n  const [titleInput, setTitleInput] = useState(playlist.title);\n  const [authorInput, setAuthorInput] = useState(playlist.author);\n\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        border: \"default\",\n        marginTop: 10,\n      }}\n    >\n      {\" \"}\n      <Pane display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n        <Avatar\n          src={playlist.image && \"data:image/png;\" + playlist.image}\n          name={playlist.title}\n          size={50}\n          onClick={() => {\n            // get image upload and replace image in base64\n            openFileDialog((event) => {\n              let baseURL = \"\";\n              const reader = new FileReader();\n              const file = event.target.files[0];\n              reader.readAsDataURL(file);\n              reader.onload = () => {\n                baseURL = reader.result;\n                playlist.image = baseURL;\n              };\n            });\n          }}\n        />\n        <Heading margin={10}>\n          {editTextData ? (\n            <>\n              <TextInput\n                value={titleInput}\n                width=\"150px\"\n                onChange={(e) => setTitleInput(e.target.value)}\n              />{\" \"}\n              -{\" \"}\n              <TextInput\n                value={authorInput}\n                width=\"150px\"\n                onChange={(e) => setAuthorInput(e.target.value)}\n              />\n            </>\n          ) : (\n            <>\n              {playlist.title} - {playlist.author}\n            </>\n          )}\n        </Heading>\n        <Tooltip content=\"Edit Title & Author\">\n          {editTextData ? (\n            <>\n              <Button\n                intent=\"success\"\n                onClick={() => {\n                  playlist.title = titleInput;\n                  playlist.author = authorInput;\n                  setEditTextData(false);\n                }}\n              >\n                Save\n              </Button>\n              <Button\n                intent=\"danger\"\n                onClick={() => {\n                  setTitleInput(playlist.title);\n                  setAuthorInput(playlist.author);\n                  setEditTextData(false);\n                }}\n              >\n                Discard\n              </Button>\n            </>\n          ) : (\n            <EditIcon onClick={() => setEditTextData(true)} size={30} />\n          )}\n        </Tooltip>\n        <Tooltip content=\"Download\">\n          <FloppyDiskIcon size={25} onClick={() => exportPlaylist(playlist)} />\n        </Tooltip>\n        <Tooltip content=\"Delete\">\n          <DeleteIcon\n            size={25}\n            onClick={() => setShowDeleteConfirmation(true)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Add new song\">\n          <AddIcon size={25} onClick={() => setShowAddDialog(true)} />\n        </Tooltip>\n        <Dialog\n          /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n          isShown={showDeleteConfirmation}\n          title={`Delete ${playlist.title}?`}\n          onCloseComplete={() => setShowDeleteConfirmation(false)}\n          onConfirm={() => {\n            playlist.delete();\n            setShowDeleteConfirmation(false);\n          }}\n          confirmLabel={\"Confirm\"}\n          intent=\"danger\"\n        >\n          This action is irreverisble!\n        </Dialog>\n        <Dialog\n          /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n          isShown={!!songToRemove}\n          title={`Delete ${songToRemove?.name} from ${playlist.title}?`}\n          onCloseComplete={() => setSongToRemove(null)}\n          onConfirm={() => {\n            playlist.removeSong(songToRemove);\n            setSongToRemove(null);\n          }}\n          confirmLabel={\"Confirm\"}\n          intent=\"danger\"\n        >\n          This action is irreverisble!\n        </Dialog>\n        <Dialog\n          shouldCloseOnOverlayClick={false}\n          isShown={showAddDialog}\n          title={`Add new song to ${playlist.title}`}\n          onCloseComplete={() => setShowAddDialog(false)}\n          onConfirm={async () => {\n            try {\n              setAddSongError(false);\n              setShowAddSongLoader(true);\n              await playlist.addSongByKey(songKeyInput);\n            } catch (err) {\n              setAddSongError(true);\n              console.log(err);\n            } finally {\n              setShowAddSongLoader(false);\n            }\n          }}\n          confirmLabel={\"Add\"}\n        >\n          {showAddSongLoader && <Spinner />}\n          Add the song key you want to add here:\n          <TextInput\n            isInvalid={addSongError}\n            value={songKeyInput}\n            onChange={(e) => setSongKeyInput(e.target.value)}\n          ></TextInput>\n        </Dialog>\n      </Pane>\n      <Table maxWidth=\"80%\">\n        <Table.Head height={42}>\n          <Table.HeaderCell flexBasis={40} flexGrow={0} />\n          <Table.HeaderCell flexBasis={60} flexGrow={0}>\n            Cover\n          </Table.HeaderCell>\n          {columnsToShow.map((key) => (\n            <Table.HeaderCell key={key}>\n              {camelCaseToWords(key)}\n            </Table.HeaderCell>\n          ))}\n        </Table.Head>\n        <Table.Body display=\"flex\">\n          <Droppable droppableId={playlist.id}>\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={{ flex: 1, minHeight: \"40px\" }}\n              >\n                {playlist.songs.map((song, idx) => (\n                  <DraggableRow\n                    idx={idx}\n                    playlistId={playlist.id}\n                    song={song}\n                    onRemoveSongClick={(song) => setSongToRemove(song)}\n                  />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default observer(PlaylistTable);\n","import React from \"react\";\nimport { FilePicker } from \"evergreen-ui\";\n\nconst PlaylistImporter = ({ onImportClick }) => (\n  <FilePicker\n    multiple\n    accept=\".bplist,.json\"\n    width={250}\n    onChange={async (files) => {\n      // assume bplist and json files can be parsed as json\n      console.log(files);\n      const playlists = await Promise.all(\n        files.map(async (file) => ({\n          type: file.name.split(\".\")[1],\n          data: JSON.parse(await file.text()),\n        }))\n      );\n      onImportClick(playlists);\n    }}\n    placeholder=\"Import playlist(s)\"\n  />\n);\n\nexport default PlaylistImporter;\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// move api calls to another file\nconst getMapByHash = async (hash) => {\n  return (await fetch(`https://beatsaver.com/api/maps/by-hash/${hash}`)).json();\n};\n\nconst getMapByKey = async (songKey) => {\n  return await fetch(`https://beatsaver.com/api/maps/detail/${songKey}`);\n};\n\nconst getBeatSaverMapList = async (page, type = \"hot\") => {\n  return (await fetch(`https://beatsaver.com/api/maps/${type}/${page}`)).json();\n};\n\n// beat saver server songs\nexport class BeatSaverBrowserStore {\n  _songsList = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  fetchSongs = async (page) => {\n    const resp = await getBeatSaverMapList(page);\n    console.log(resp);\n    this._songsList = resp.docs;\n  };\n\n  get songsList() {\n    return this._songsList;\n  }\n}\n\nexport const BeatSaverBrowserStoreContext = createContext();\n\n// stores a cache of beat-saver song data\nexport class BeatSaverSongCache {\n  songCache = null;\n\n  constructor() {\n    this.songCache = store.get(\"songCache\") ?? {}; // hash: data\n  }\n\n  manualAddSongData(data) {\n    this.songCache[data.hash] = data;\n    store.set(\"songCache\", this.songCache);\n  }\n\n  async retrieveSongData(hash) {\n    if (!(hash in this.songCache)) {\n      const resp = await getMapByHash(hash);\n      this.songCache[hash] = resp;\n    } // else, skip (unless needs to overwrite for some reason?)\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  // would love to use Promise.all if no rate limit :(\n  async retrieveMultipleSongData(hashes, rateLimitDelay = 100) {\n    const missingHashes = hashes.filter((hash) => !(hash in this.songCache));\n    console.log(\"getting hashes\", missingHashes);\n    for (const hash of missingHashes) {\n      console.log(\"getting from beat-saver server \", hash);\n      const resp = await getMapByHash(hash);\n      await new Promise((res) => setTimeout(res, rateLimitDelay)); // sleep\n      this.songCache[hash] = resp;\n    }\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  getSongDataByHash(hash) {\n    if (!(hash in this.songCache)) {\n      this.retrieveSongData(hash);\n    }\n    return this.songCache[hash];\n  }\n}\n\nexport const beatSaverSongCache = new BeatSaverSongCache();\n\nexport class PlaylistStore {\n  playlists = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    const savedPlaylists = store.get(\"playlists\");\n    if (savedPlaylists) {\n      const playlists = [];\n      for (const playlist of savedPlaylists) {\n        playlists.push(new Playlist(playlist, this)); // converts json to Playlist objects\n      }\n      this.playlists = playlists;\n    }\n  }\n\n  getNewId() {\n    const allIds = [this.playlists.map((p) => p.id)];\n    let newId = uuidv4();\n\n    while (allIds.includes(newId)) {\n      newId = uuidv4();\n    }\n\n    return newId;\n  }\n\n  createNewPlaylist() {\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: null,\n        title: \"New Playlist\",\n        author: \"Beaterlist\",\n        songs: [],\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  }\n\n  appendPlaylist(playlist) {\n    this.playlists.push(playlist);\n    this.saveAllPlaylists();\n  }\n\n  deletePlaylist(playlist) {\n    const idx = this.playlists.indexOf(playlist);\n    this.playlists.splice(idx, 1);\n    this.saveAllPlaylists();\n  }\n\n  movePlaylist(playlist, idx) {\n    this.playlists.splice(this.playlists.indexOf(playlist), 1);\n    this.playlists.splice(idx, 0, playlist);\n    this.saveAllPlaylists();\n  }\n\n  saveAllPlaylists() {\n    const playlistsJson = this.playlists.map((playlist) => playlist.asJson());\n    store.set(\"playlists\", playlistsJson);\n  }\n\n  addPlaylistFromBplistData = async (data) => {\n    // do preloading here for multiple songs\n    await beatSaverSongCache.retrieveMultipleSongData(\n      data.songs.map((song) => song.hash)\n    );\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: data.image,\n        title: data.playlistTitle,\n        author: data.playlistAuthor,\n        songs: data.songs,\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  };\n}\n\nexport const PlaylistStoreContext = createContext();\n\nexport class Playlist {\n  _id = null;\n  _image = null; // base64\n  _title = \"\";\n  _author = \"\";\n  _songs = []; // array of Songs\n\n  store = undefined;\n\n  constructor(savedPlaylist, store) {\n    makeAutoObservable(this);\n    this._id = savedPlaylist.id; // custom id\n    this._image = savedPlaylist.image;\n    this._title = savedPlaylist.title;\n    this._author = savedPlaylist.author;\n    this._songs = savedPlaylist.songs.map((song) => new Song(song));\n    this.store = store;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get image() {\n    return this._image;\n  }\n  set image(image) {\n    this._image = image;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get title() {\n    return this._title;\n  }\n  set title(title) {\n    this._title = title;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get author() {\n    return this._author;\n  }\n  set author(author) {\n    this._author = author;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get songs() {\n    return this._songs;\n  }\n  set songs(songs) {\n    this._songs = songs;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  delete() {\n    this.store.deletePlaylist(this);\n  }\n\n  removeSong(song) {\n    const idx = this._songs.indexOf(song);\n    this._songs.splice(idx, 1);\n  }\n\n  insertSongAtIdx(song, idx) {\n    this._songs.splice(idx, 0, song);\n  }\n\n  async addSongByKey(songKey) {\n    // try to find song in beat-saver\n    // if have, save the data, and the song, save the playlist after\n    // if not, do nothing\n    try {\n      const resp = await getMapByKey(songKey);\n      const songData = await resp.json();\n      console.log(songData);\n      const duplicateSong = this._songs.find(\n        (song) => song.hash === songData.hash\n      );\n      if (duplicateSong) {\n        return; // should show some error here tho\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.push(new Song({ hash: songData.hash }));\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async addSongBySongData(songData, idx = undefined) {\n    const hash = songData.hash;\n    if (idx === undefined) {\n      idx = this._songs.length;\n    }\n    try {\n      if (this._songs.find((s) => s.hash === hash)) {\n        return; // should show some dup error\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.splice(idx, 0, new Song({ hash })); // let Song handle fetching\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  asJson() {\n    return {\n      id: this._id,\n      image: this.image,\n      title: this.title,\n      author: this.author,\n      songs: this.songs.map((song) => song.asJson()),\n    };\n  }\n\n  asBplistJson() {\n    return {\n      image: this.image,\n      playlistTitle: this.title,\n      playlistAuthor: this.author,\n      songs: this.songs.map((song) => song.asBplistJson()),\n    };\n  }\n}\n\nexport class Song {\n  hash = null; // unique id\n  beatSaverSongObject = undefined; // data object retrieve from beat-saver server\n\n  constructor(savedSong) {\n    this.hash = savedSong.hash;\n    this.beatSaverSongObject = beatSaverSongCache.getSongDataByHash(this.hash);\n  }\n\n  get name() {\n    return this.beatSaverSongObject?.metadata.songName;\n  }\n  get author() {\n    return this.beatSaverSongObject?.metadata.songAuthorName;\n  }\n  get levelAuthor() {\n    return this.beatSaverSongObject?.metadata.levelAuthorName;\n  }\n  get difficulties() {\n    return this.beatSaverSongObject?.metadata.difficulties;\n  }\n  get description() {\n    return this.beatSaverSongObject?.description;\n  }\n  get coverURL() {\n    return \"https://beatsaver.com\" + this.beatSaverSongObject?.coverURL;\n  }\n\n  asJson() {\n    // only need hash, as the rest of the data can be retrieved from cache\n    return {\n      hash: this.hash,\n    };\n  }\n\n  asBplistJson() {\n    return {\n      hash: this.hash,\n      levelid: `custom_level_${this.hash}`,\n      songName: this.beatSaverSongObject.metadata.name,\n      levelAuthorName: this.beatSaverSongObject.metadata.levelAuthorName,\n      difficulties: this.beatSaverSongObject.metadata.characteristics.flatMap(\n        (characteristic) =>\n          Object.entries(characteristic.difficulties)\n            .filter(([key, value]) => value !== null)\n            .map(([key, value]) => ({\n              characteristic: characteristic.name,\n              name: key,\n            }))\n      ),\n    };\n  }\n}\n\n/*\n{\n    \"metadata\":{\n        \"difficulties\":{\"easy\":false,\"normal\":true,\"hard\":true,\"expert\":true,\"expertPlus\":false},\n        \"duration\":0,\n        \"automapper\":null,\n        \"characteristics\":[\n            {\n                \"name\":\"Standard\",\n                \"difficulties\": {\n                    \"easy\":null,\n                    \"normal\":{\"duration\":355.7663269042969,\"length\":167,\"bombs\":334,\"notes\":375,\"obstacles\":9,\"njs\":10,\"njsOffset\":0},\n                    \"hard\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":306,\"notes\":480,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expert\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":138,\"notes\":662,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expertPlus\":null\n                }\n            }\n        ],\n        \"songName\":\"Technologic\",\n        \"songSubName\":\"Daft Punk\",\n        \"songAuthorName\":\"Awfulnaut\",\n        \"levelAuthorName\":\"awfulnaut\",\n        \"bpm\":127\n    },\n    \"stats\":{\n        \"downloads\":428745,\n        \"plays\":6632,\n        \"downVotes\":186,\n        \"upVotes\":9789,\n        \"heat\":120.6632514,\n        \"rating\":0.9512470277249632\n    },\n    \"description\":\"Expert / Hard / Normal\",\n    \"deletedAt\":null,\n    \"_id\":\"5cff620e48229f7d88fc67a8\",\n    \"key\":\"747\",\n    \"name\":\"Technologic - Daft Punk (Update)\",\n    \"uploader\":{\"_id\":\"5cff0b7398cc5a672c84edac\",\"username\":\"awfulnaut\"},\n    \"uploaded\":\"2018-06-30T18:30:38.000Z\",\n    \"hash\":\"831247d7d02e948e5d03622748bb130b5057023d\",\n    \"directDownload\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.zip\",\n    \"downloadURL\":\"/api/download/key/747\",\n    \"coverURL\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.jpg\"\n}\n*/\n","import { useState, useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Table, Button } from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { BeatSaverBrowserStoreContext } from \"../stores/playlists\";\n\nconst BeatSaverBrowser = () => {\n  const [page, setPage] = useState(0);\n  const songStore = useContext(BeatSaverBrowserStoreContext);\n  const songsList = songStore.songsList;\n\n  useEffect(() => songStore.fetchSongs(page), [page]);\n\n  return (\n    <Table width=\"200px\">\n      <Button onClick={songStore.fetchSongs}>Load</Button>\n      <Table.Head height={42}>\n        <Table.HeaderCell flexBasis={40} flexGrow={0} />\n        <Table.HeaderCell flexBasis={60} flexGrow={0}>\n          Cover\n        </Table.HeaderCell>\n      </Table.Head>\n      <Droppable droppableId=\"BEAT_SAVER_BROWSER\" isDropDisabled={true}>\n        {(provided, snapshot) => (\n          <Table.Body\n            display=\"flex\"\n            flexDirection=\"column\"\n            ref={provided.innerRef}\n          >\n            {songsList.map((s, idx) => (\n              <Draggable draggableId={`browser-${s.hash}`} index={idx}>\n                {(provided, snapshot) => (\n                  <Table.Row\n                    height={40}\n                    key={s.hash}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                  >\n                    <Table.TextCell>{s.name}</Table.TextCell>\n                  </Table.Row>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Table.Body>\n        )}\n      </Droppable>\n    </Table>\n  );\n};\n\nexport default observer(BeatSaverBrowser);\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { Pane, Heading, Checkbox, Button } from \"evergreen-ui\";\nimport PlaylistTable from \"./components/PlaylistTable\";\nimport PlaylistImporter from \"./components/PlaylistImporter\";\nimport BeatSaverBrowser from \"./components/BeatSaverBrowser\";\n\nimport {\n  BeatSaverBrowserStoreContext,\n  PlaylistStoreContext,\n} from \"./stores/playlists\";\nimport { UserPreferencesContext } from \"./stores/preferences\";\n\n// TodO:\n// persist config\n// delete playlist?\n// create playlists\n// add songs by hash?\n// playlist import to persist playlist\n// list to list exchanges\n\n// image for new playlist\n// placeholder for empty playlist\n// load in playlist browser (beat saver), to drag playlists in\n// more columns, beautified difficulties\n// playlist title edit collision check\n// (import will need to do replacement checks)\n\nconst App = () => {\n  const preferences = useContext(UserPreferencesContext);\n  const horizontalMode = preferences.playlistHorizontalMode;\n  const columnsToShow = preferences.playlistColumnsToShow;\n\n  const playlistStore = useContext(PlaylistStoreContext);\n  const playlists = playlistStore.playlists;\n\n  const beatSaverBrowserSongStore = useContext(BeatSaverBrowserStoreContext);\n\n  let filteredColumns = Object.entries(columnsToShow)\n    .filter(([_, value]) => value)\n    .map(([key, _]) => key);\n  if (filteredColumns.length === 0) {\n    filteredColumns = Object.keys(columnsToShow);\n  }\n\n  const onDragEnd = ({ destination, source }) => {\n    // the only one that is required\n    console.log(destination, source);\n    if (!destination || !source) {\n      return;\n    }\n    const destIdx = destination.index;\n    const sourceIdx = source.index;\n\n    // beat saver browser logic\n    if (source.droppableId === \"BEAT_SAVER_BROWSER\") {\n      const destinationPlaylist = playlistStore.playlists.find(\n        (p) => p.id === destination.droppableId\n      );\n      const songToAdd = beatSaverBrowserSongStore.songsList[source.index];\n      console.log(\"hiyaya\", songToAdd.hash);\n      destinationPlaylist.addSongBySongData(songToAdd, destIdx);\n      playlistStore.saveAllPlaylists();\n      return;\n    }\n\n    // playlists reordering logic\n    if (\n      source.droppableId === \"playlists\" &&\n      destination.droppableId === \"playlists\"\n    ) {\n      const playlistToMove = playlistStore.playlists[source.index];\n      playlistStore.movePlaylist(playlistToMove, destination.index);\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destIdx === sourceIdx\n    ) {\n      return;\n    }\n\n    // droppableId are playlist unique ids\n    // very kludgey, should use some id?\n    const sourcePlaylist = playlistStore.playlists.find(\n      (p) => p.id === source.droppableId\n    );\n    // move within list\n    if (destination.droppableId === source.droppableId) {\n      const songToMove = sourcePlaylist.songs[sourceIdx];\n      sourcePlaylist.removeSong(songToMove); // could be optimized, currently does extra search\n      sourcePlaylist.insertSongAtIdx(songToMove, destIdx);\n      console.log(\"moving within\", songToMove, sourceIdx, destIdx);\n    } else {\n      // move across list\n      const destinationPlaylist = playlistStore.playlists.find(\n        (p) => p.id === destination.droppableId\n      );\n      const songToMove = sourcePlaylist.songs[sourceIdx];\n      sourcePlaylist.removeSong(songToMove);\n      destinationPlaylist.insertSongAtIdx(songToMove, destIdx);\n    }\n    playlistStore.saveAllPlaylists();\n  };\n\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      //justifyContent=\"center\"\n      border=\"default\"\n    >\n      <Pane\n        width=\"100%\"\n        height=\"50px\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        paddingLeft=\"20px\"\n        paddingRight=\"20px\"\n        paddingTop=\"10px\"\n        paddingBottom=\"10px\"\n        backgroundColor=\"#012548\"\n      >\n        <Heading color=\"white\">BeaterList</Heading>\n      </Pane>\n      <div\n        style={{\n          width: \"100%\",\n          flexDirection: \"row\",\n          display: \"flex\",\n        }}\n      >\n        <Pane minWidth=\"300px\" padding={30}>\n          <Heading>Playlists Config</Heading>\n          <Checkbox\n            label=\"Horizontal Mode\"\n            checked={horizontalMode}\n            onChange={(e) => {\n              preferences.playlistHorizontalMode = e.target.checked;\n            }}\n          />\n\n          <Heading>Columns To Show</Heading>\n          {Object.keys(preferences.playlistColumnsToShow).map((key) => (\n            <Checkbox\n              key={key}\n              label={key}\n              checked={columnsToShow[key]}\n              onChange={(e) =>\n                preferences.setPlaylistColumnToShow(key, e.target.checked)\n              }\n            />\n          ))}\n\n          <PlaylistImporter\n            onImportClick={async (playlists) => {\n              const promises = playlists.map((playlist) =>\n                playlistStore.addPlaylistFromBplistData(playlist.data)\n              );\n              const out = await Promise.all(promises); // can check type here\n              console.log(playlists, \"plist\", out, promises);\n            }}\n          />\n          <Button onClick={() => playlistStore.createNewPlaylist()}>\n            Add new playlist\n          </Button>\n        </Pane>\n\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Pane>\n            <BeatSaverBrowser />\n          </Pane>\n\n          <Droppable type=\"playlists\" droppableId=\"playlists\">\n            {(provider) => (\n              <>\n                <Pane\n                  ref={provider.innerRef}\n                  width=\"100%\"\n                  height=\"80vh\"\n                  display=\"flex\"\n                  flexDirection={horizontalMode ? \"row\" : \"column\"}\n                  //justifyContent=\"center\"\n                  border=\"default\"\n                  //overflowX=\"scroll\"\n                >\n                  {playlists.map((playlist, idx) => (\n                    <Draggable\n                      draggableId={`playlist-${playlist.id}`}\n                      index={idx}\n                    >\n                      {(provided) => (\n                        <Pane\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <PlaylistTable\n                            key={`${playlist.title}|${idx}`}\n                            playlistKey={`${playlist.title}|${idx}`}\n                            playlist={playlist}\n                          />\n                        </Pane>\n                      )}\n                    </Draggable>\n                  ))}\n                </Pane>\n                {provider.placeholder}\n              </>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </Pane>\n  );\n};\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport {\n  PlaylistStoreContext,\n  PlaylistStore,\n  BeatSaverBrowserStore,\n  BeatSaverBrowserStoreContext,\n} from \"./stores/playlists\";\nimport {\n  UserPreferencesContext,\n  UserPreferencesStore,\n} from \"./stores/preferences\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlaylistStoreContext.Provider value={new PlaylistStore()}>\n      <BeatSaverBrowserStoreContext.Provider\n        value={new BeatSaverBrowserStore()}\n      >\n        <UserPreferencesContext.Provider value={new UserPreferencesStore()}>\n          <App />\n        </UserPreferencesContext.Provider>\n      </BeatSaverBrowserStoreContext.Provider>\n    </PlaylistStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}