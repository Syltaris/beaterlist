{"version":3,"sources":["stores/preferences.js","components/PlaylistTable.js","components/PlaylistImporter.js","stores/playlists.js","App.js","reportWebVitals.js","index.js"],"names":["bplistSongKeys","UserPreferencesStore","_playlistsHorizontalMode","_playlistColumnsToShow","undefined","makeAutoObservable","this","store","get","output","forEach","key","initColumnsToShow","flag","set","columns","Object","entries","filter","map","length","keys","UserPreferencesContext","createContext","getColText","song","difficulties","join","camelCaseToWords","text","result","replace","charAt","toUpperCase","slice","DraggableRow","type","idx","onRemoveSongClick","columnsToShow","useContext","getPlaylistColumnNamesToShow","draggableId","hash","index","provided","snapshot","Table","Row","isSelectable","height","ref","innerRef","draggableProps","dragHandleProps","Cell","flexBasis","flexGrow","DragHandleHorizontalIcon","Avatar","src","coverURL","size","TextCell","DeleteIcon","onClick","observer","playlist","console","log","useState","editTextData","setEditTextData","showDeleteConfirmation","setShowDeleteConfirmation","showAddDialog","setShowAddDialog","showAddSongLoader","setShowAddSongLoader","addSongError","setAddSongError","songKeyInput","setSongKeyInput","songToRemove","setSongToRemove","title","titleInput","setTitleInput","author","authorInput","setAuthorInput","TYPE","style","width","display","flexDirection","alignItems","border","marginTop","Pane","image","callback","inputElement","document","createElement","accept","multiple","addEventListener","dispatchEvent","MouseEvent","openFileDialog","event","baseURL","reader","FileReader","file","target","files","readAsDataURL","onload","Heading","margin","TextInput","value","onChange","e","Tooltip","content","Button","intent","EditIcon","FloppyDiskIcon","bplistJson","asBplistJson","element","setAttribute","encodeURIComponent","JSON","stringify","body","appendChild","click","removeChild","exportPlaylist","AddIcon","Dialog","isShown","onCloseComplete","onConfirm","delete","confirmLabel","name","removeSong","shouldCloseOnOverlayClick","a","addSongByKey","Spinner","isInvalid","onDragEnd","destination","source","destIdx","sourceIdx","listToUpdate","songs","itemToInsert","splice","maxWidth","Head","HeaderCell","Body","droppableId","placeholder","PlaylistImporter","onImportClick","FilePicker","Promise","all","split","parse","data","playlists","getMapByHash","fetch","json","getMapByKey","songKey","beatSaverSongCache","songCache","resp","hashes","rateLimitDelay","missingHashes","res","setTimeout","retrieveSongData","PlaylistStore","addPlaylistFromBplistData","retrieveMultipleSongData","Playlist","playlistTitle","playlistAuthor","push","saveAllPlaylists","savedPlaylists","indexOf","playlistsJson","asJson","PlaylistStoreContext","savedPlaylist","_image","_title","_author","_songs","Song","deletePlaylist","songData","find","manualAddSongData","savedSong","beatSaverSongObject","getSongDataByHash","metadata","songName","songAuthorName","levelAuthorName","description","levelid","characteristics","flatMap","characteristic","preferences","horizontalMode","playlistHorizontalMode","playlistColumnsToShow","playlistStore","filteredColumns","justifyContent","paddingLeft","paddingRight","paddingTop","paddingBottom","backgroundColor","color","minWidth","padding","Checkbox","label","checked","setPlaylistColumnToShow","promises","out","createNewPlaylist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.d6dce955.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst bplistSongKeys = [\"name\", \"description\", \"difficulties\"];\n\nconst initColumnsToShow = () => {\n  const output = {};\n  bplistSongKeys.forEach((key) => (output[key] = false));\n  return output;\n};\n\nexport class UserPreferencesStore {\n  _playlistsHorizontalMode = false;\n  _playlistColumnsToShow = undefined;\n\n  constructor() {\n    makeAutoObservable(this);\n    this._playlistsHorizontalMode =\n      store.get(\"playlistHorizontalMode\") || false;\n    this._playlistColumnsToShow =\n      store.get(\"playlistColumnsToShow\") || initColumnsToShow();\n  }\n\n  get playlistHorizontalMode() {\n    return this._playlistsHorizontalMode;\n  }\n  set playlistHorizontalMode(flag) {\n    this._playlistsHorizontalMode = flag;\n    store.set(\"playlistHorizontalMode\", flag);\n  }\n\n  get playlistColumnsToShow() {\n    return this._playlistColumnsToShow;\n  }\n  set playlistColumnsToShow(columns) {\n    this._playlistColumnsToShow = columns;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow); // probably can autorun the save function\n  }\n\n  setPlaylistColumnToShow(key, flag) {\n    this._playlistColumnsToShow[key] = flag;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow);\n  }\n  getPlaylistColumnNamesToShow() {\n    const columns = Object.entries(this._playlistColumnsToShow)\n      .filter(([_, value]) => value)\n      .map(([key, _]) => key);\n    if (columns.length === 0) {\n      return Object.keys(this._playlistColumnsToShow);\n    }\n    return columns;\n  }\n}\n\nexport const UserPreferencesContext = createContext();\n","import React, { useState, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Table,\n  Avatar,\n  Heading,\n  DragHandleHorizontalIcon,\n  FloppyDiskIcon,\n  EditIcon,\n  Tooltip,\n  TextInput,\n  Pane,\n  Button,\n  DeleteIcon,\n  Dialog,\n  AddIcon,\n  Spinner,\n} from \"evergreen-ui\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\n\nconst getColText = (key, song) => {\n  // special cases\n  switch (key) {\n    case \"difficulties\":\n      return Object.entries(song.difficulties)\n        .filter(([key, value]) => value)\n        .map(([key, _]) => key)\n        .join(\",\");\n    default:\n      break;\n  }\n\n  // very dirty way to parse out the relevant col data\n  if (key in song) {\n    return song[key];\n  }\n};\n\nconst camelCaseToWords = (text) => {\n  var result = text.replace(/([A-Z])/g, \" $1\");\n  var finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n  return finalResult;\n};\n\nconst DraggableRow = ({ type, idx, song, onRemoveSongClick }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n  return (\n    <Draggable key={song.hash} draggableId={song.hash} index={idx} type={type}>\n      {(provided, snapshot) => (\n        <Table.Row\n          key={song.hash}\n          isSelectable\n          height={42}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Table.Cell flexBasis={40} flexGrow={0}>\n            <DragHandleHorizontalIcon />\n          </Table.Cell>\n          <Table.Cell flexBasis={60} flexGrow={0}>\n            <Avatar src={song.coverURL} size={40} />\n          </Table.Cell>\n          {columnsToShow.map((key) => (\n            <Table.TextCell key={key}>{getColText(key, song)}</Table.TextCell>\n          ))}\n          <Table.Cell flexBasis={35} flexGrow={0}>\n            <DeleteIcon onClick={() => onRemoveSongClick(song)} />\n          </Table.Cell>\n        </Table.Row>\n      )}\n    </Draggable>\n  );\n};\n\nconst exportPlaylist = (playlist) => {\n  const bplistJson = playlist.asBplistJson();\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(bplistJson))\n  );\n  element.setAttribute(\"download\", `${playlist.title}.bplist`);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nfunction openFileDialog(callback) {\n  // this function must be called from  a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement(\"input\");\n  // Set its type to file\n  inputElement.type = \"file\";\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  inputElement.accept = \"image/*\";\n  // Accept multiple files\n  inputElement.multiple = false;\n  // set onchange event to call callback when user has selected file\n  inputElement.addEventListener(\"change\", callback);\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent(\"click\"));\n}\n\n// TODO: handle json types seperately\nconst PlaylistTable = ({ playlist }) => {\n  console.log(playlist, \"rerends.\");\n  const [editTextData, setEditTextData] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAddSongLoader, setShowAddSongLoader] = useState(false);\n  const [addSongError, setAddSongError] = useState(false);\n  const [songKeyInput, setSongKeyInput] = useState(undefined);\n  const [songToRemove, setSongToRemove] = useState(null);\n\n  const [titleInput, setTitleInput] = useState(playlist.title);\n  const [authorInput, setAuthorInput] = useState(playlist.author);\n\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n\n  const onDragEnd = ({ destination, source }) => {\n    // the only one that is required\n    console.log(destination, source);\n    if (!destination || !source) {\n      return;\n    }\n\n    const destIdx = destination.index;\n    const sourceIdx = source.index;\n\n    const listToUpdate = [...playlist.songs];\n    const itemToInsert = listToUpdate[sourceIdx];\n    listToUpdate.splice(sourceIdx, 1);\n    listToUpdate.splice(destIdx, 0, itemToInsert);\n    playlist.songs = listToUpdate;\n  };\n\n  const TYPE = \"playlistSong\"; //`${playlist.title}${playlist.author}`;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        border: \"default\",\n        marginTop: 10,\n      }}\n    >\n      {\" \"}\n      <Pane display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n        {playlist.image && (\n          <Avatar\n            src={\"data:image/png;\" + playlist.image}\n            size={50}\n            onClick={() => {\n              // get image upload and replace image in base64\n              openFileDialog((event) => {\n                let baseURL = \"\";\n                const reader = new FileReader();\n                const file = event.target.files[0];\n                reader.readAsDataURL(file);\n                reader.onload = () => {\n                  baseURL = reader.result;\n                  playlist.image = baseURL;\n                };\n              });\n            }}\n          />\n        )}\n        <Heading margin={10}>\n          {editTextData ? (\n            <>\n              <TextInput\n                value={titleInput}\n                width=\"150px\"\n                onChange={(e) => setTitleInput(e.target.value)}\n              />{\" \"}\n              -{\" \"}\n              <TextInput\n                value={authorInput}\n                width=\"150px\"\n                onChange={(e) => setAuthorInput(e.target.value)}\n              />\n            </>\n          ) : (\n            <>\n              {playlist.title} - {playlist.author}\n            </>\n          )}\n        </Heading>\n        <Tooltip content=\"Edit Title & Author\">\n          {editTextData ? (\n            <>\n              <Button\n                intent=\"success\"\n                onClick={() => {\n                  playlist.title = titleInput;\n                  playlist.author = authorInput;\n                  setEditTextData(false);\n                }}\n              >\n                Save\n              </Button>\n              <Button\n                intent=\"danger\"\n                onClick={() => {\n                  setTitleInput(playlist.title);\n                  setAuthorInput(playlist.author);\n                  setEditTextData(false);\n                }}\n              >\n                Discard\n              </Button>\n            </>\n          ) : (\n            <EditIcon onClick={() => setEditTextData(true)} size={30} />\n          )}\n        </Tooltip>\n        <Tooltip content=\"Download\">\n          <FloppyDiskIcon size={25} onClick={() => exportPlaylist(playlist)} />\n        </Tooltip>\n        <Tooltip content=\"Delete\">\n          <DeleteIcon\n            size={25}\n            onClick={() => setShowDeleteConfirmation(true)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Add new song\">\n          <AddIcon size={25} onClick={() => setShowAddDialog(true)} />\n        </Tooltip>\n        <Dialog\n          /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n          isShown={showDeleteConfirmation}\n          title={`Delete ${playlist.title}?`}\n          onCloseComplete={() => setShowDeleteConfirmation(false)}\n          onConfirm={() => {\n            playlist.delete();\n            setShowDeleteConfirmation(false);\n          }}\n          confirmLabel={\"Confirm\"}\n          intent=\"danger\"\n        >\n          This action is irreverisble!\n        </Dialog>\n        <Dialog\n          /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n          isShown={!!songToRemove}\n          title={`Delete ${songToRemove?.name} from ${playlist.title}?`}\n          onCloseComplete={() => setSongToRemove(null)}\n          onConfirm={() => {\n            playlist.removeSong(songToRemove);\n            setSongToRemove(null);\n          }}\n          confirmLabel={\"Confirm\"}\n          intent=\"danger\"\n        >\n          This action is irreverisble!\n        </Dialog>\n        <Dialog\n          shouldCloseOnOverlayClick={false}\n          isShown={showAddDialog}\n          title={`Add new song to ${playlist.title}`}\n          onCloseComplete={() => setShowAddDialog(false)}\n          onConfirm={async () => {\n            try {\n              setAddSongError(false);\n              setShowAddSongLoader(true);\n              await playlist.addSongByKey(songKeyInput);\n            } catch (err) {\n              setAddSongError(true);\n              console.log(err);\n            } finally {\n              setShowAddSongLoader(false);\n            }\n          }}\n          confirmLabel={\"Add\"}\n        >\n          {showAddSongLoader && <Spinner />}\n          Add the song key you want to add here:\n          <TextInput\n            isInvalid={addSongError}\n            value={songKeyInput}\n            onChange={(e) => setSongKeyInput(e.target.value)}\n          ></TextInput>\n        </Dialog>\n      </Pane>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Table maxWidth=\"80%\">\n          <Table.Head height={42}>\n            <Table.HeaderCell flexBasis={40} flexGrow={0} />\n            <Table.HeaderCell flexBasis={60} flexGrow={0}>\n              Cover\n            </Table.HeaderCell>\n            {columnsToShow.map((key) => (\n              <Table.HeaderCell key={key}>\n                {camelCaseToWords(key)}\n              </Table.HeaderCell>\n            ))}\n          </Table.Head>\n          <Table.Body>\n            <Droppable droppableId={playlist.title} type={TYPE}>\n              {(provided, snapshot) => (\n                <div ref={provided.innerRef}>\n                  {playlist.songs.map((song, idx) => (\n                    <DraggableRow\n                      type={TYPE}\n                      idx={idx}\n                      song={song}\n                      onRemoveSongClick={(song) => setSongToRemove(song)}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </Table.Body>\n        </Table>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default observer(PlaylistTable);\n","import React from \"react\";\nimport { FilePicker } from \"evergreen-ui\";\n\nconst PlaylistImporter = ({ onImportClick }) => (\n  <FilePicker\n    multiple\n    accept=\".bplist,.json\"\n    width={250}\n    onChange={async (files) => {\n      // assume bplist and json files can be parsed as json\n      console.log(files);\n      const playlists = await Promise.all(\n        files.map(async (file) => ({\n          type: file.name.split(\".\")[1],\n          data: JSON.parse(await file.text()),\n        }))\n      );\n      onImportClick(playlists);\n    }}\n    placeholder=\"Import playlist(s)\"\n  />\n);\n\nexport default PlaylistImporter;\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\n\n// move api calls to another file\nconst getMapByHash = async (hash) => {\n  return (await fetch(`https://beatsaver.com/api/maps/by-hash/${hash}`)).json();\n};\n\nconst getMapByKey = async (songKey) => {\n  return await fetch(`https://beatsaver.com/api/maps/detail/${songKey}`);\n};\n\n// stores a cache of beat-saver song data\nexport class BeatSaverSongCache {\n  songCache = null;\n\n  constructor() {\n    this.songCache = store.get(\"songCache\") ?? {}; // hash: data\n  }\n\n  manualAddSongData(data) {\n    this.songCache[data.hash] = data;\n    store.set(\"songCache\", this.songCache);\n  }\n\n  async retrieveSongData(hash) {\n    if (!hash in this.songCache) {\n      const resp = await getMapByHash(hash);\n      this.songCache[hash] = resp;\n    } // else, skip (unless needs to overwrite for some reason?)\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  // would love to use Promise.all if no rate limit :(\n  async retrieveMultipleSongData(hashes, rateLimitDelay = 100) {\n    const missingHashes = hashes.filter((hash) => !(hash in this.songCache));\n    console.log(\"getting hashes\", missingHashes);\n    for (const hash of missingHashes) {\n      console.log(\"getting from beat-saver server \", hash);\n      const resp = await getMapByHash(hash);\n      await new Promise((res) => setTimeout(res, rateLimitDelay)); // sleep\n      this.songCache[hash] = resp;\n    }\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  getSongDataByHash(hash) {\n    if (!hash in this.songCache) {\n      this.retrieveSongData(hash);\n    }\n    return this.songCache[hash];\n  }\n}\n\nexport const beatSaverSongCache = new BeatSaverSongCache();\n\nexport class PlaylistStore {\n  playlists = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    const savedPlaylists = store.get(\"playlists\");\n    if (savedPlaylists) {\n      const playlists = [];\n      for (const playlist of savedPlaylists) {\n        playlists.push(new Playlist(playlist, this)); // converts json to Playlist objects\n      }\n      this.playlists = playlists;\n    }\n  }\n\n  createNewPlaylist() {\n    const playlist = new Playlist(\n      {\n        image: \"\",\n        title: \"New Playlist\",\n        author: \"Beaterlist\",\n        songs: [],\n      },\n      this\n    );\n    this.playlists.push(playlist);\n    this.saveAllPlaylists();\n  }\n\n  deletePlaylist(playlist) {\n    const idx = this.playlists.indexOf(playlist);\n    this.playlists.splice(idx, 1);\n    this.saveAllPlaylists();\n  }\n\n  saveAllPlaylists() {\n    const playlistsJson = this.playlists.map((playlist) => playlist.asJson());\n    store.set(\"playlists\", playlistsJson);\n  }\n\n  addPlaylistFromBplistData = async (data) => {\n    // do preloading here for multiple songs\n    await beatSaverSongCache.retrieveMultipleSongData(\n      data.songs.map((song) => song.hash)\n    );\n    const playlist = new Playlist(\n      {\n        image: data.image,\n        title: data.playlistTitle,\n        author: data.playlistAuthor,\n        songs: data.songs,\n      },\n      this\n    );\n    this.playlists.push(playlist);\n\n    this.saveAllPlaylists();\n  };\n}\n\nexport const PlaylistStoreContext = createContext();\n\nexport class Playlist {\n  _image = \"\"; // base64\n  _title = \"\";\n  _author = \"\";\n  _songs = []; // array of Songs\n\n  store = undefined;\n\n  constructor(savedPlaylist, store) {\n    makeAutoObservable(this);\n    this._image = savedPlaylist.image;\n    this._title = savedPlaylist.title;\n    this._author = savedPlaylist.author;\n    this._songs = savedPlaylist.songs.map((song) => new Song(song));\n    this.store = store;\n  }\n\n  get image() {\n    return this._image;\n  }\n  set image(image) {\n    this._image = image;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get title() {\n    return this._title;\n  }\n  set title(title) {\n    this._title = title;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get author() {\n    return this._author;\n  }\n  set author(author) {\n    this._author = author;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get songs() {\n    return this._songs;\n  }\n  set songs(songs) {\n    this._songs = songs;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  delete() {\n    this.store.deletePlaylist(this);\n  }\n\n  removeSong(song) {\n    const idx = this.songs.indexOf(song);\n    this.songs.splice(idx, 1);\n  }\n\n  async addSongByKey(songKey) {\n    // try to find song in beat-saver\n    // if have, save the data, and the song, save the playlist after\n    // if not, do nothing\n    try {\n      const resp = await getMapByKey(songKey);\n      const songData = await resp.json();\n      console.log(songData);\n      const duplicateSong = this.songs.find(\n        (song) => song.hash === songData.hash\n      );\n      if (duplicateSong) {\n        return; // should show some error here tho\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.push(new Song({ hash: songData.hash }));\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  asJson() {\n    return {\n      image: this.image,\n      title: this.title,\n      author: this.author,\n      songs: this.songs.map((song) => song.asJson()),\n    };\n  }\n\n  asBplistJson() {\n    return {\n      image: this.image,\n      playlistTitle: this.title,\n      playlistAuthor: this.author,\n      songs: this.songs.map((song) => song.asBplistJson()),\n    };\n  }\n}\n\nexport class Song {\n  hash = null; // unique id\n  beatSaverSongObject = undefined; // data object retrieve from beat-saver server\n\n  constructor(savedSong) {\n    this.hash = savedSong.hash;\n    this.beatSaverSongObject = beatSaverSongCache.getSongDataByHash(this.hash);\n  }\n\n  get name() {\n    return this.beatSaverSongObject?.metadata.songName;\n  }\n  get author() {\n    return this.beatSaverSongObject?.metadata.songAuthorName;\n  }\n  get levelAuthor() {\n    return this.beatSaverSongObject?.metadata.levelAuthorName;\n  }\n  get difficulties() {\n    return this.beatSaverSongObject?.metadata.difficulties;\n  }\n  get description() {\n    return this.beatSaverSongObject?.description;\n  }\n  get coverURL() {\n    return \"https://beatsaver.com\" + this.beatSaverSongObject?.coverURL;\n  }\n\n  asJson() {\n    // only need hash, as the rest of the data can be retrieved from cache\n    return {\n      hash: this.hash,\n    };\n  }\n\n  asBplistJson() {\n    return {\n      hash: this.hash,\n      levelid: `custom_level_${this.hash}`,\n      songName: this.beatSaverSongObject.metadata.name,\n      levelAuthorName: this.beatSaverSongObject.metadata.levelAuthorName,\n      difficulties: this.beatSaverSongObject.metadata.characteristics.flatMap(\n        (characteristic) =>\n          Object.entries(characteristic.difficulties)\n            .filter(([key, value]) => value !== null)\n            .map(([key, value]) => ({\n              characteristic: characteristic.name,\n              name: key,\n            }))\n      ),\n    };\n  }\n}\n\n/*\n{\n    \"metadata\":{\n        \"difficulties\":{\"easy\":false,\"normal\":true,\"hard\":true,\"expert\":true,\"expertPlus\":false},\n        \"duration\":0,\n        \"automapper\":null,\n        \"characteristics\":[\n            {\n                \"name\":\"Standard\",\n                \"difficulties\": {\n                    \"easy\":null,\n                    \"normal\":{\"duration\":355.7663269042969,\"length\":167,\"bombs\":334,\"notes\":375,\"obstacles\":9,\"njs\":10,\"njsOffset\":0},\n                    \"hard\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":306,\"notes\":480,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expert\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":138,\"notes\":662,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expertPlus\":null\n                }\n            }\n        ],\n        \"songName\":\"Technologic\",\n        \"songSubName\":\"Daft Punk\",\n        \"songAuthorName\":\"Awfulnaut\",\n        \"levelAuthorName\":\"awfulnaut\",\n        \"bpm\":127\n    },\n    \"stats\":{\n        \"downloads\":428745,\n        \"plays\":6632,\n        \"downVotes\":186,\n        \"upVotes\":9789,\n        \"heat\":120.6632514,\n        \"rating\":0.9512470277249632\n    },\n    \"description\":\"Expert / Hard / Normal\",\n    \"deletedAt\":null,\n    \"_id\":\"5cff620e48229f7d88fc67a8\",\n    \"key\":\"747\",\n    \"name\":\"Technologic - Daft Punk (Update)\",\n    \"uploader\":{\"_id\":\"5cff0b7398cc5a672c84edac\",\"username\":\"awfulnaut\"},\n    \"uploaded\":\"2018-06-30T18:30:38.000Z\",\n    \"hash\":\"831247d7d02e948e5d03622748bb130b5057023d\",\n    \"directDownload\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.zip\",\n    \"downloadURL\":\"/api/download/key/747\",\n    \"coverURL\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.jpg\"\n}\n*/\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Pane, Heading, Checkbox, Button } from \"evergreen-ui\";\nimport PlaylistTable from \"./components/PlaylistTable\";\nimport PlaylistImporter from \"./components/PlaylistImporter\";\n\nimport { PlaylistStoreContext } from \"./stores/playlists\";\nimport { UserPreferencesContext } from \"./stores/preferences\";\n\n// TodO:\n// persist config\n// delete playlist?\n// create playlists\n// add songs by hash?\n// playlist import to persist playlist\n\n// list to list exchanges\n// load in playlist browser (beat saver), to drag playlists in\n// playlist import will need to do replacement checks\n// playlist title edit collision check\n// more columns, beautified difficulties\n// multidrag\n\nconst App = () => {\n  const preferences = useContext(UserPreferencesContext);\n  const horizontalMode = preferences.playlistHorizontalMode;\n  const columnsToShow = preferences.playlistColumnsToShow;\n\n  const playlistStore = useContext(PlaylistStoreContext);\n  const playlists = playlistStore.playlists;\n\n  let filteredColumns = Object.entries(columnsToShow)\n    .filter(([_, value]) => value)\n    .map(([key, _]) => key);\n  if (filteredColumns.length === 0) {\n    filteredColumns = Object.keys(columnsToShow);\n  }\n\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      //justifyContent=\"center\"\n      border=\"default\"\n    >\n      <Pane\n        width=\"100%\"\n        height=\"50px\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        paddingLeft=\"20px\"\n        paddingRight=\"20px\"\n        paddingTop=\"10px\"\n        paddingBottom=\"10px\"\n        backgroundColor=\"#012548\"\n      >\n        <Heading color=\"white\">BeaterList</Heading>\n      </Pane>\n      <div\n        style={{\n          width: \"100%\",\n          flexDirection: \"row\",\n          display: \"flex\",\n        }}\n      >\n        <Pane minWidth=\"300px\" padding={30}>\n          <Heading>Playlists Config</Heading>\n          <Checkbox\n            label=\"Horizontal Mode\"\n            checked={horizontalMode}\n            onChange={(e) => {\n              preferences.playlistHorizontalMode = e.target.checked;\n            }}\n          />\n\n          <Heading>Columns To Show</Heading>\n          {Object.keys(preferences.playlistColumnsToShow).map((key) => (\n            <Checkbox\n              key={key}\n              label={key}\n              checked={columnsToShow[key]}\n              onChange={(e) =>\n                preferences.setPlaylistColumnToShow(key, e.target.checked)\n              }\n            />\n          ))}\n\n          <PlaylistImporter\n            onImportClick={async (playlists) => {\n              const promises = playlists.map((playlist) =>\n                playlistStore.addPlaylistFromBplistData(playlist.data)\n              );\n              const out = await Promise.all(promises); // can check type here\n              console.log(playlists, \"plist\", out, promises);\n            }}\n          />\n          <Button onClick={() => playlistStore.createNewPlaylist()}>\n            Add new playlist\n          </Button>\n        </Pane>\n        <Pane\n          width=\"100%\"\n          height=\"80vh\"\n          display=\"flex\"\n          flexDirection={horizontalMode ? \"row\" : \"column\"}\n          //justifyContent=\"center\"\n          border=\"default\"\n          //overflowX=\"scroll\"\n        >\n          {playlists.map((playlist, idx) => (\n            <PlaylistTable key={playlist.title + idx} playlist={playlist} />\n          ))}\n        </Pane>\n      </div>\n    </Pane>\n  );\n};\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { PlaylistStoreContext, PlaylistStore } from \"./stores/playlists\";\nimport {\n  UserPreferencesContext,\n  UserPreferencesStore,\n} from \"./stores/preferences\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlaylistStoreContext.Provider value={new PlaylistStore()}>\n      <UserPreferencesContext.Provider value={new UserPreferencesStore()}>\n        <App />\n      </UserPreferencesContext.Provider>\n    </PlaylistStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}