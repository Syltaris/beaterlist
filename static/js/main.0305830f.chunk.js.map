{"version":3,"sources":["components/PlaylistTable/components/Header.js","stores/preferences.js","utils/string.js","components/PlaylistTable/components/SongList.js","components/PlaylistTable/index.js","components/PlaylistTable/PlaylistTable.js","controllers/api.js","stores/beatSaver.js","stores/songs.js","stores/playlists.js","components/PlaylistsContainer.js","components/BeatSaverBrowser.js","components/PlaylistImporter.js","components/Sidebar.js","components/TopNavbar.js","App.js","controllers/dragAndDrop.js","reportWebVitals.js","index.js"],"names":["observer","playlist","useState","editTextData","setEditTextData","showDeleteConfirmation","setShowDeleteConfirmation","showAddDialog","setShowAddDialog","showAddSongLoader","setShowAddSongLoader","addSongError","setAddSongError","songKeyInput","setSongKeyInput","title","titleInput","setTitleInput","author","authorInput","setAuthorInput","Pane","display","flexDirection","alignItems","paddingBottom","Avatar","src","image","name","size","onClick","callback","inputElement","document","createElement","type","accept","multiple","addEventListener","dispatchEvent","MouseEvent","openFileDialog","event","baseURL","reader","FileReader","file","target","files","readAsDataURL","onload","result","toaster","success","Heading","margin","TextInput","value","width","onChange","e","Tooltip","content","IconButton","icon","TickIcon","intent","marginLeft","CrossIcon","style","marginRight","EditIcon","FloppyDiskIcon","bplistJson","asBplistJson","element","setAttribute","encodeURIComponent","JSON","stringify","body","appendChild","click","removeChild","exportPlaylist","DeleteIcon","AddIcon","Dialog","isShown","onCloseComplete","onConfirm","delete","confirmLabel","shouldCloseOnOverlayClick","a","addSongByKey","addedSongData","danger","message","Spinner","Text","isInvalid","bplistSongKeys","userPreferencesStore","_playlistsHorizontalMode","_playlistColumnsToShow","undefined","_showBeatSaverBrowser","makeAutoObservable","this","store","get","output","forEach","key","initColumnsToShow","flag","set","columns","Object","entries","filter","map","length","keys","UserPreferencesContext","createContext","camelCaseToWords","text","replace","charAt","toUpperCase","slice","difficultyBadgePropsMap","easy","color","normal","hard","expert","expertPlus","getColText","song","difficulties","join","getTableCellPropsForCol","props","flexBasis","flexGrow","flexShrink","includes","getTableCellForCol","Table","Cell","coverURL","difficultyKey","sort","k1","k2","difficultyKeys","indexOf","Badge","console","error","getDifficultyBadge","TextCell","getColHeaderText","DraggableRow","idx","playlistId","onRemoveSongClick","columnsToShow","useContext","getPlaylistColumnNamesToShow","draggableId","hash","index","provided","Row","isSelectable","height","ref","innerRef","draggableProps","dragHandleProps","DragHandleHorizontalIcon","songToRemove","setSongToRemove","minWidth","overflowX","Head","HeaderCell","TextHeaderCell","Body","overflow","droppableId","id","snapshot","minHeight","songs","placeholder","removeSong","PlaylistTable","padding","getMapByHash","fetch","json","getMapByKey","songKey","getBeatSaverMapList","page","beatSaverBrowserStore","_songsList","fetchSongs","resp","log","songsList","docs","BeatSaverBrowserStoreContext","beatSaverSongCache","songCache","data","hashes","rateLimitDelay","missingHashes","Promise","res","setTimeout","retrieveSongData","Song","savedSong","_hash","beatSaverSongObject","getSongDataByHash","metadata","songName","songAuthorName","levelAuthorName","description","stats","downloads","plays","upVotes","downVotes","Number","parseFloat","rating","toPrecision","Date","uploaded","toLocaleDateString","levelid","characteristics","flatMap","characteristic","Playlist","savedPlaylist","_id","_image","_title","_author","_songs","saveAllPlaylists","deletePlaylist","splice","songData","Error","find","manualAddSongData","push","s","asJson","playlistTitle","playlistAuthor","playlistStore","_playlists","addPlaylistFromBplistData","retrieveMultipleSongData","getNewId","appendPlaylist","savedPlaylists","playlists","allIds","p","newId","uuidv4","playlistsJson","PlaylistStoreContext","PlaylistsViewer","userPreferences","playlistHorizontalMode","border","playlistKey","PlaylistsContainer","songStore","useEffect","Button","isDropDisabled","onImportClick","values","all","split","parse","preferences","horizontalMode","playlistColumnsToShow","createNewPlaylist","marginBottom","promises","out","showBeatSaverBrowser","Checkbox","label","checked","setPlaylistColumnToShow","justifyContent","paddingLeft","paddingRight","paddingTop","backgroundColor","TopNavbar","onDragEnd","destination","source","destIdx","sourceIdx","destinationPlaylist","songToAdd","addSongBySongData","sourcePlaylist","songToMove","insertSongAtIdx","playlistToMove","movePlaylist","err","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.0305830f.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Avatar,\n  Heading,\n  FloppyDiskIcon,\n  EditIcon,\n  Tooltip,\n  TextInput,\n  Pane,\n  DeleteIcon,\n  Dialog,\n  AddIcon,\n  Spinner,\n  IconButton,\n  TickIcon,\n  CrossIcon,\n  Text,\n  toaster,\n} from \"evergreen-ui\";\n\nconst exportPlaylist = (playlist) => {\n  const bplistJson = playlist.asBplistJson();\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(bplistJson))\n  );\n  element.setAttribute(\"download\", `${playlist.title}.bplist`);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nfunction openFileDialog(callback) {\n  // this function must be called from  a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement(\"input\");\n  // Set its type to file\n  inputElement.type = \"file\";\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  inputElement.accept = \"image/*\";\n  // Accept multiple files\n  inputElement.multiple = false;\n  // set onchange event to call callback when user has selected file\n  inputElement.addEventListener(\"change\", callback);\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent(\"click\"));\n}\n\nexport const Header = ({ playlist }) => {\n  const [editTextData, setEditTextData] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAddSongLoader, setShowAddSongLoader] = useState(false);\n  const [addSongError, setAddSongError] = useState(false);\n  const [songKeyInput, setSongKeyInput] = useState(\"\");\n\n  const [titleInput, setTitleInput] = useState(playlist.title);\n  const [authorInput, setAuthorInput] = useState(playlist.author);\n  return (\n    <Pane\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      paddingBottom=\"5px\"\n    >\n      <Avatar\n        src={playlist.image && \"data:image/png;\" + playlist.image}\n        name={playlist.title}\n        size={50}\n        onClick={() => {\n          // get image upload and replace image in base64\n          openFileDialog((event) => {\n            let baseURL = \"\";\n            const reader = new FileReader();\n            const file = event.target.files[0];\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n              baseURL = reader.result;\n              playlist.image = baseURL;\n              toaster.success(\"Image saved and updated.\");\n            };\n          });\n        }}\n      />\n      <Heading margin={10}>\n        {editTextData ? (\n          <>\n            <TextInput\n              value={titleInput}\n              width=\"100px\"\n              onChange={(e) => setTitleInput(e.target.value)}\n            />{\" \"}\n            -{\" \"}\n            <TextInput\n              value={authorInput}\n              width=\"100px\"\n              onChange={(e) => setAuthorInput(e.target.value)}\n            />\n            <Tooltip content=\"Save/Confirm\">\n              <IconButton\n                icon={TickIcon}\n                intent=\"success\"\n                onClick={() => {\n                  playlist.title = titleInput;\n                  playlist.author = authorInput;\n                  setEditTextData(false);\n                }}\n                marginLeft=\"2px\"\n              />\n            </Tooltip>\n            <Tooltip content=\"Discard Changes\">\n              <IconButton\n                icon={CrossIcon}\n                intent=\"danger\"\n                onClick={() => {\n                  setTitleInput(playlist.title);\n                  setAuthorInput(playlist.author);\n                  setEditTextData(false);\n                }}\n                marginLeft=\"2px\"\n              />\n            </Tooltip>\n          </>\n        ) : (\n          <>\n            {playlist.title} - {playlist.author}\n          </>\n        )}\n      </Heading>\n      <div style={{ marginLeft: \"auto\", marginRight: 0 }}>\n        <Tooltip content=\"Edit Title & Author\">\n          <IconButton\n            icon={EditIcon}\n            onClick={() => setEditTextData(!editTextData)}\n            marginLeft=\"2px\"\n          />\n        </Tooltip>\n        <Tooltip content=\"Download\">\n          <IconButton\n            icon={FloppyDiskIcon}\n            marginLeft=\"2px\"\n            onClick={() => exportPlaylist(playlist)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Delete\">\n          <IconButton\n            icon={DeleteIcon}\n            marginLeft=\"2px\"\n            onClick={() => setShowDeleteConfirmation(true)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Add new song\">\n          <IconButton\n            icon={AddIcon}\n            marginLeft=\"2px\"\n            onClick={() => setShowAddDialog(true)}\n          />\n        </Tooltip>\n      </div>\n      <Dialog\n        /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n        isShown={showDeleteConfirmation}\n        title={`Delete ${playlist.title}?`}\n        onCloseComplete={() => setShowDeleteConfirmation(false)}\n        onConfirm={() => {\n          playlist.delete();\n          toaster.success(`${playlist.title} deleted successfully.`);\n          setShowDeleteConfirmation(false);\n        }}\n        confirmLabel={\"Confirm\"}\n        intent=\"danger\"\n      >\n        This action is irreverisble!\n      </Dialog>\n\n      <Dialog\n        shouldCloseOnOverlayClick={false}\n        isShown={showAddDialog}\n        title={`Add new song to ${playlist.title}`}\n        onCloseComplete={() => setShowAddDialog(false)}\n        onConfirm={async () => {\n          try {\n            setAddSongError(false);\n            setShowAddSongLoader(true);\n            const addedSongData = await playlist.addSongByKey(songKeyInput);\n            toaster.success(\n              `${addedSongData.name} added to ${playlist.title}.`\n            );\n          } catch (err) {\n            setAddSongError(true);\n            toaster.danger(err.message);\n          } finally {\n            setShowAddSongLoader(false);\n          }\n        }}\n        confirmLabel={\"Add\"}\n      >\n        {showAddSongLoader && <Spinner />}\n        <Text>Add the song key 🔑 you want to add here:</Text>\n        <TextInput\n          marginLeft=\"10px\"\n          width=\"80px\"\n          isInvalid={addSongError}\n          value={songKeyInput}\n          onChange={(e) => setSongKeyInput(e.target.value)}\n        ></TextInput>\n      </Dialog>\n    </Pane>\n  );\n};\n\nexport default observer(Header);\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst bplistSongKeys = [\n  \"cover\",\n  \"name\",\n  \"songAuthor\",\n  \"levelAuthor\",\n  \"difficulties\",\n  \"downloads\",\n  \"plays\",\n  \"upvotes\",\n  \"downvotes\",\n  \"rating\",\n  \"uploadDate\",\n  \"key\",\n  \"hash\",\n  \"description\",\n];\n\nconst initColumnsToShow = () => {\n  const output = {};\n  bplistSongKeys.forEach((key) => (output[key] = false));\n  return output;\n};\n\nclass UserPreferencesStore {\n  _playlistsHorizontalMode = false;\n  _playlistColumnsToShow = undefined;\n  _showBeatSaverBrowser = false;\n\n  constructor() {\n    makeAutoObservable(this);\n    this._playlistsHorizontalMode =\n      store.get(\"playlistHorizontalMode\") || false;\n    this._playlistColumnsToShow =\n      store.get(\"playlistColumnsToShow\") || initColumnsToShow();\n    this._showBeatSaverBrowser = store.get(\"showBeatSaverBrowser\") || false;\n  }\n\n  get playlistHorizontalMode() {\n    return this._playlistsHorizontalMode;\n  }\n  set playlistHorizontalMode(flag) {\n    this._playlistsHorizontalMode = flag;\n    store.set(\"playlistHorizontalMode\", this._playlistsHorizontalMode);\n  }\n\n  get playlistColumnsToShow() {\n    return this._playlistColumnsToShow;\n  }\n  set playlistColumnsToShow(columns) {\n    this._playlistColumnsToShow = columns;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow); // probably can autorun the save function\n  }\n\n  get showBeatSaverBrowser() {\n    return this._showBeatSaverBrowser;\n  }\n  set showBeatSaverBrowser(flag) {\n    this._showBeatSaverBrowser = flag;\n    this._showBeatSaverBrowser = store.set(\n      \"showBeatSaverBrowser\",\n      this._showBeatSaverBrowser\n    );\n  }\n\n  setPlaylistColumnToShow(key, flag) {\n    this._playlistColumnsToShow[key] = flag;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow);\n  }\n  getPlaylistColumnNamesToShow() {\n    const columns = Object.entries(this._playlistColumnsToShow)\n      .filter(([_, value]) => value)\n      .map(([key, _]) => key);\n    if (columns.length === 0) {\n      return Object.keys(this._playlistColumnsToShow);\n    }\n    return columns;\n  }\n}\n\nexport const userPreferencesStore = new UserPreferencesStore();\nexport const UserPreferencesContext = createContext(userPreferencesStore);\n","export const camelCaseToWords = (text) => {\n  var result = text.replace(/([A-Z])/g, \" $1\");\n  var finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n  return finalResult;\n};\n","import { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Table,\n  Avatar,\n  DragHandleHorizontalIcon,\n  DeleteIcon,\n  Dialog,\n  Badge,\n  toaster,\n} from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { UserPreferencesContext } from \"../../../stores/preferences\";\n\nimport { camelCaseToWords } from \"../../../utils/string\";\n\nconst difficultyBadgePropsMap = {\n  easy: { text: \"EZ\", color: \"green\" },\n  normal: { text: \"N\", color: \"blue\" },\n  hard: { text: \"H\", color: \"yellow\" },\n  expert: { text: \"E\", color: \"red\" },\n  expertPlus: { text: \"E+\", color: \"purple\" },\n};\n\nconst getDifficultyBadge = (difficultyKey) => {\n  if (!(difficultyKey in difficultyBadgePropsMap)) {\n    console.error(\"missing difficulty key: \", difficultyKey);\n    return;\n  }\n  const { text, color } = difficultyBadgePropsMap[difficultyKey];\n  return (\n    <Badge key={difficultyKey} color={color}>\n      {text}\n    </Badge>\n  );\n};\n\nconst getColText = (key, song) => {\n  // special cases\n  switch (key) {\n    case \"difficulties\":\n      return Object.entries(song.difficulties)\n        .filter(([key, value]) => value)\n        .map(([key, _]) => key)\n        .join(\",\");\n    default:\n      break;\n  }\n\n  // very dirty way to parse out the relevant col data\n  if (key in song) {\n    return song[key];\n  }\n};\n\nconst getTableCellPropsForCol = (key) => {\n  let props = {\n    flexBasis: 120,\n    flexGrow: 0,\n    flexShrink: 0,\n  };\n  if (key === \"description\") {\n    props = {\n      flexBasis: 600,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (key === \"cover\") {\n    props = {\n      flexBasis: 60,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (key === \"hash\") {\n    props = {\n      flexBasis: 300,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (\n    [\"downloads\", \"plays\", \"upvotes\", \"downvotes\", \"rating\", \"key\"].includes(\n      key\n    )\n  ) {\n    // small width cells\n    props = {\n      flexBasis: 72,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  }\n\n  return props;\n};\n\nconst getTableCellForCol = (key, song) => {\n  if (key === \"cover\") {\n    return (\n      <Table.Cell key={key} {...getTableCellPropsForCol(key)}>\n        <Avatar src={song.coverURL} size={40} />\n      </Table.Cell>\n    );\n  }\n\n  if (key === \"difficulties\") {\n    return (\n      <Table.Cell key={key} {...getTableCellPropsForCol(key)}>\n        {Object.entries(song.difficulties)\n          .filter(([_, flag]) => flag)\n          .map(([difficultyKey, _]) => difficultyKey)\n          .sort((k1, k2) => {\n            const difficultyKeys = Object.keys(difficultyBadgePropsMap);\n            return difficultyKeys.indexOf(k1) - difficultyKeys.indexOf(k2);\n          })\n          .map((difficultyKey) => getDifficultyBadge(difficultyKey))}\n      </Table.Cell>\n    );\n  }\n\n  return (\n    <Table.TextCell key={key} {...getTableCellPropsForCol(key)}>\n      {getColText(key, song)}\n    </Table.TextCell>\n  );\n};\n\nconst getColHeaderText = (key) => {\n  // to handle special small width text\n  switch (key) {\n    case \"upvotes\":\n      return \"👍\";\n    case \"downvotes\":\n      return \"👎\";\n    case \"downloads\":\n      return \"💾\";\n    case \"plays\":\n      return \"▶️\";\n    case \"rating\":\n      return \"💯\";\n    case \"key\":\n      return \"🔑\";\n    default:\n      return camelCaseToWords(key);\n  }\n};\n\nconst DraggableRow = ({ idx, playlistId, song, onRemoveSongClick }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n  return (\n    <Draggable\n      key={song.hash}\n      draggableId={`${playlistId}-${song.hash}`}\n      index={idx}\n    >\n      {(provided) => (\n        <Table.Row\n          key={song.hash}\n          isSelectable\n          height={42}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Table.Cell flexBasis={40} flexGrow={0} flexShrink={0}>\n            <DragHandleHorizontalIcon />\n          </Table.Cell>\n          {columnsToShow.map((key) => getTableCellForCol(key, song))}\n          <Table.Cell\n            flexBasis={35}\n            flexGrow={0}\n            flexShrink={0}\n            marginRight={0}\n            marginLeft=\"auto\"\n          >\n            <DeleteIcon onClick={() => onRemoveSongClick(song)} />\n          </Table.Cell>\n        </Table.Row>\n      )}\n    </Draggable>\n  );\n};\n\nexport const SongList = ({ playlist }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n\n  const [songToRemove, setSongToRemove] = useState(null);\n  return (\n    <Table minWidth=\"300px\" overflowX=\"scroll\">\n      <Table.Head height={42}>\n        <Table.HeaderCell flexBasis={40} flexGrow={0} />\n        {columnsToShow.map((key) => (\n          <Table.TextHeaderCell key={key} {...getTableCellPropsForCol(key)}>\n            {getColHeaderText(key)}\n          </Table.TextHeaderCell>\n        ))}\n        <Table.HeaderCell\n          flexBasis={35}\n          flexGrow={0}\n          flexShrink={0}\n          marginRight={0}\n          marginLeft=\"auto\"\n        />\n      </Table.Head>\n      <Table.Body overflow=\"visible\">\n        <Droppable key={playlist.id} droppableId={playlist.id}>\n          {(provided, snapshot) => (\n            <div ref={provided.innerRef} style={{ minHeight: \"40px\" }}>\n              {playlist.songs.map((song, idx) => (\n                <DraggableRow\n                  key={song.hash}\n                  idx={idx}\n                  playlistId={playlist.id}\n                  song={song}\n                  onRemoveSongClick={(song) => setSongToRemove(song)}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </Table.Body>\n      <Dialog\n        isShown={!!songToRemove}\n        title={`Delete ${songToRemove?.name} from ${playlist.title}?`}\n        onCloseComplete={() => setSongToRemove(null)}\n        onConfirm={() => {\n          playlist.removeSong(songToRemove);\n          setSongToRemove(null);\n          toaster.success(\n            `${songToRemove.name} deleted from ${playlist.title}.`\n          );\n        }}\n        confirmLabel={\"Confirm\"}\n        intent=\"danger\"\n      >\n        This action is irreverisble!\n      </Dialog>\n    </Table>\n  );\n};\n\nexport default observer(SongList);\n","import PlaylistTable from \"./PlaylistTable\";\nexport default PlaylistTable;\n","import { observer } from \"mobx-react-lite\";\n\nimport Header from \"./components/Header\";\nimport SongList from \"./components/SongList\";\n\n// TODO: handle json types seperately\nconst PlaylistTable = ({ playlist }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 20,\n      }}\n    >\n      <Header playlist={playlist} />\n      <SongList playlist={playlist} />\n    </div>\n  );\n};\n\nexport default observer(PlaylistTable);\n","export const getMapByHash = async (hash) => {\n  return (await fetch(`https://beatsaver.com/api/maps/by-hash/${hash}`)).json();\n};\n\nexport const getMapByKey = async (songKey) => {\n  return await fetch(`https://beatsaver.com/api/maps/detail/${songKey}`);\n};\n\nexport const getBeatSaverMapList = async (page, type = \"hot\") => {\n  return (await fetch(`https://beatsaver.com/api/maps/${type}/${page}`)).json();\n};\n","import { createContext } from \"react\";\nimport store from \"store\";\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getBeatSaverMapList, getMapByHash } from \"../controllers/api\";\n\n// beat saver server songs\nclass BeatSaverBrowserStore {\n  _songsList = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  fetchSongs = async (page, type) => {\n    const resp = await getBeatSaverMapList(page, type);\n    console.log(resp);\n    this.songsList = resp.docs;\n  };\n\n  get songsList() {\n    return this._songsList;\n  }\n\n  set songsList(songsList) {\n    this._songsList = songsList;\n  }\n}\n\nexport const beatSaverBrowserStore = new BeatSaverBrowserStore();\nexport const BeatSaverBrowserStoreContext = createContext(\n  beatSaverBrowserStore\n);\n\n// stores a cache of beat-saver song data\nclass BeatSaverSongCache {\n  songCache = null;\n\n  constructor() {\n    this.songCache = store.get(\"songCache\") ?? {}; // hash: data\n  }\n\n  manualAddSongData(data) {\n    this.songCache[data.hash] = data;\n    store.set(\"songCache\", this.songCache);\n  }\n\n  async retrieveSongData(hash) {\n    if (!(hash in this.songCache)) {\n      const resp = await getMapByHash(hash);\n      this.songCache[hash] = resp;\n    } // else, skip (unless needs to overwrite for some reason?)\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  // would love to use Promise.all if no rate limit :(\n  async retrieveMultipleSongData(hashes, rateLimitDelay = 100) {\n    const missingHashes = hashes.filter((hash) => !(hash in this.songCache));\n    console.log(\"getting hashes\", missingHashes);\n    for (const hash of missingHashes) {\n      console.log(\"getting from beat-saver server \", hash);\n      const resp = await getMapByHash(hash);\n      await new Promise((res) => setTimeout(res, rateLimitDelay)); // sleep\n      this.songCache[hash] = resp;\n    }\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  getSongDataByHash(hash) {\n    if (!(hash in this.songCache)) {\n      this.retrieveSongData(hash);\n    }\n    return this.songCache[hash];\n  }\n}\n\nexport const beatSaverSongCache = new BeatSaverSongCache();\n","import { beatSaverSongCache } from \"./beatSaver\";\n\nexport class Song {\n  _hash = null; // unique id\n  beatSaverSongObject = undefined; // data object retrieve from beat-saver server\n\n  constructor(savedSong) {\n    this._hash = savedSong.hash;\n    this.beatSaverSongObject = beatSaverSongCache.getSongDataByHash(this.hash);\n  }\n\n  get hash() {\n    return this._hash;\n  }\n\n  get coverURL() {\n    return \"https://beatsaver.com\" + this.beatSaverSongObject?.coverURL;\n  }\n  get name() {\n    return this.beatSaverSongObject?.metadata.songName;\n  }\n  get songAuthor() {\n    return this.beatSaverSongObject?.metadata.songAuthorName;\n  }\n  get levelAuthor() {\n    return this.beatSaverSongObject?.metadata.levelAuthorName;\n  }\n  get difficulties() {\n    return this.beatSaverSongObject?.metadata.difficulties;\n  }\n  get description() {\n    return this.beatSaverSongObject?.description;\n  }\n\n  get downloads() {\n    return this.beatSaverSongObject?.stats.downloads;\n  }\n  get plays() {\n    return this.beatSaverSongObject?.stats.plays;\n  }\n  get upvotes() {\n    return this.beatSaverSongObject?.stats.upVotes;\n  }\n  get downvotes() {\n    return this.beatSaverSongObject?.stats.downVotes;\n  }\n  get rating() {\n    return Number.parseFloat(\n      this.beatSaverSongObject?.stats.rating * 100 ?? 0.0\n    ).toPrecision(2);\n  }\n  get uploadDate() {\n    return new Date(this.beatSaverSongObject?.uploaded).toLocaleDateString();\n  }\n  get key() {\n    return this.beatSaverSongObject?.key;\n  }\n\n  asJson() {\n    // only need hash, as the rest of the data can be retrieved from cache\n    return {\n      hash: this.hash,\n    };\n  }\n\n  asBplistJson() {\n    return {\n      hash: this.hash,\n      levelid: `custom_level_${this.hash}`,\n      songName: this.beatSaverSongObject.metadata.name,\n      levelAuthorName: this.beatSaverSongObject.metadata.levelAuthorName,\n      difficulties: this.beatSaverSongObject.metadata.characteristics.flatMap(\n        (characteristic) =>\n          Object.entries(characteristic.difficulties)\n            .filter(([key, value]) => value !== null)\n            .map(([key, value]) => ({\n              characteristic: characteristic.name,\n              name: key,\n            }))\n      ),\n    };\n  }\n}\n\n/*\n{\n    \"metadata\":{\n        \"difficulties\":{\"easy\":false,\"normal\":true,\"hard\":true,\"expert\":true,\"expertPlus\":false},\n        \"duration\":0,\n        \"automapper\":null,\n        \"characteristics\":[\n            {\n                \"name\":\"Standard\",\n                \"difficulties\": {\n                    \"easy\":null,\n                    \"normal\":{\"duration\":355.7663269042969,\"length\":167,\"bombs\":334,\"notes\":375,\"obstacles\":9,\"njs\":10,\"njsOffset\":0},\n                    \"hard\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":306,\"notes\":480,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expert\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":138,\"notes\":662,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expertPlus\":null\n                }\n            }\n        ],\n        \"songName\":\"Technologic\",\n        \"songSubName\":\"Daft Punk\",\n        \"songAuthorName\":\"Awfulnaut\",\n        \"levelAuthorName\":\"awfulnaut\",\n        \"bpm\":127\n    },\n    \"stats\":{\n        \"downloads\":428745,\n        \"plays\":6632,\n        \"downVotes\":186,\n        \"upVotes\":9789,\n        \"heat\":120.6632514,\n        \"rating\":0.9512470277249632\n    },\n    \"description\":\"Expert / Hard / Normal\",\n    \"deletedAt\":null,\n    \"_id\":\"5cff620e48229f7d88fc67a8\",\n    \"key\":\"747\",\n    \"name\":\"Technologic - Daft Punk (Update)\",\n    \"uploader\":{\"_id\":\"5cff0b7398cc5a672c84edac\",\"username\":\"awfulnaut\"},\n    \"uploaded\":\"2018-06-30T18:30:38.000Z\",\n    \"hash\":\"831247d7d02e948e5d03622748bb130b5057023d\",\n    \"directDownload\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.zip\",\n    \"downloadURL\":\"/api/download/key/747\",\n    \"coverURL\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.jpg\"\n}\n*/\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Song } from \"./songs\";\nimport { beatSaverSongCache } from \"./beatSaver\";\nimport { getMapByKey } from \"../controllers/api\";\n\nexport class Playlist {\n  _id = null;\n  _image = null; // base64\n  _title = \"\";\n  _author = \"\";\n  _songs = []; // array of Songs\n\n  store = undefined;\n\n  constructor(savedPlaylist, store) {\n    makeAutoObservable(this);\n    this._id = savedPlaylist.id; // custom id\n    this._image = savedPlaylist.image;\n    this._title = savedPlaylist.title;\n    this._author = savedPlaylist.author;\n    this._songs = savedPlaylist.songs.map((song) => new Song(song));\n    this.store = store;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get image() {\n    return this._image;\n  }\n  set image(image) {\n    this._image = image;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get title() {\n    return this._title;\n  }\n  set title(title) {\n    this._title = title;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get author() {\n    return this._author;\n  }\n  set author(author) {\n    this._author = author;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get songs() {\n    return this._songs;\n  }\n  set songs(songs) {\n    this._songs = songs;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  delete() {\n    this.store.deletePlaylist(this);\n  }\n\n  removeSong(song) {\n    const idx = this._songs.indexOf(song);\n    this._songs.splice(idx, 1);\n  }\n\n  insertSongAtIdx(song, idx) {\n    this._songs.splice(idx, 0, song);\n  }\n\n  async addSongByKey(songKey) {\n    /* try to find song in beat-saver\n     if have, save the data, and the song, save the playlist after\n     if not, do nothing\n     */\n    let songData;\n    try {\n      const resp = await getMapByKey(songKey);\n      songData = await resp.json();\n    } catch (err) {\n      throw Error(`Could not retreive song with key: ${songKey}`);\n    }\n\n    const duplicateSong = this._songs.find(\n      (song) => song.hash === songData.hash\n    );\n    if (duplicateSong) {\n      throw Error(\"Song already exists in playlist.\");\n    }\n\n    beatSaverSongCache.manualAddSongData(songData);\n    this._songs.push(new Song({ hash: songData.hash }));\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n\n    return songData;\n  }\n\n  async addSongBySongData(songData, idx = undefined) {\n    const hash = songData.hash;\n    if (idx === undefined) {\n      idx = this._songs.length;\n    }\n    try {\n      if (this._songs.find((s) => s.hash === hash)) {\n        return; // should show some dup error\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.splice(idx, 0, new Song({ hash })); // let Song handle fetching\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  asJson() {\n    return {\n      id: this._id,\n      image: this.image,\n      title: this.title,\n      author: this.author,\n      songs: this.songs.map((song) => song.asJson()),\n    };\n  }\n\n  asBplistJson() {\n    return {\n      image: this.image,\n      playlistTitle: this.title,\n      playlistAuthor: this.author,\n      songs: this.songs.map((song) => song.asBplistJson()),\n    };\n  }\n}\n\nclass PlaylistStore {\n  _playlists = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    const savedPlaylists = store.get(\"playlists\");\n    if (savedPlaylists) {\n      const playlists = [];\n      for (const playlist of savedPlaylists) {\n        playlists.push(new Playlist(playlist, this)); // converts json to Playlist objects\n      }\n      this._playlists = playlists;\n    }\n  }\n\n  get playlists() {\n    return this._playlists;\n  }\n\n  getNewId() {\n    const allIds = [this._playlists.map((p) => p.id)];\n    let newId = uuidv4();\n\n    while (allIds.includes(newId)) {\n      newId = uuidv4();\n    }\n\n    return newId;\n  }\n\n  createNewPlaylist() {\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: null,\n        title: \"New Playlist\",\n        author: \"Beaterlist\",\n        songs: [],\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  }\n\n  appendPlaylist(playlist) {\n    this._playlists.push(playlist);\n    this.saveAllPlaylists();\n  }\n\n  deletePlaylist(playlist) {\n    const idx = this._playlists.indexOf(playlist);\n    this._playlists.splice(idx, 1);\n    this.saveAllPlaylists();\n  }\n\n  movePlaylist(playlist, idx) {\n    this._playlists.splice(this._playlists.indexOf(playlist), 1);\n    this._playlists.splice(idx, 0, playlist);\n    this.saveAllPlaylists();\n  }\n\n  saveAllPlaylists() {\n    const playlistsJson = this._playlists.map((playlist) => playlist.asJson());\n    store.set(\"playlists\", playlistsJson);\n  }\n\n  addPlaylistFromBplistData = async (data) => {\n    // do preloading here for multiple songs\n    await beatSaverSongCache.retrieveMultipleSongData(\n      data.songs.map((song) => song.hash)\n    );\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: data.image,\n        title: data.playlistTitle,\n        author: data.playlistAuthor,\n        songs: data.songs,\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  };\n}\n\nexport const playlistStore = new PlaylistStore();\nexport const PlaylistStoreContext = createContext(playlistStore);\n","import { useContext } from \"react\";\n\nimport { observer } from \"mobx-react-lite\";\n\nimport PlaylistTable from \"./PlaylistTable/\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\nimport { PlaylistStoreContext } from \"../stores/playlists\";\n\nconst PlaylistsContainer = () => {\n  const userPreferences = useContext(UserPreferencesContext);\n  const playlistStore = useContext(PlaylistStoreContext);\n  return (\n    <PlaylistsViewer\n      userPreferences={userPreferences}\n      playlistStore={playlistStore}\n    />\n  );\n};\n\nconst PlaylistsViewer = observer(({ userPreferences, playlistStore }) => (\n  <div\n    style={{\n      width: userPreferences.playlistHorizontalMode ? \"100%\" : \"50%\",\n      height: \"80vh\",\n      display: \"flex\",\n      flexDirection: userPreferences.playlistHorizontalMode ? \"row\" : \"column\",\n      border: \"default\",\n    }}\n  >\n    {playlistStore.playlists.map((playlist, idx) => (\n      <PlaylistTable\n        key={`${playlist.title}|${idx}`}\n        playlistKey={`${playlist.title}|${idx}`}\n        playlist={playlist}\n      />\n    ))}\n  </div>\n));\n\nexport default PlaylistsContainer;\n","import { useState, useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Table, Button } from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { BeatSaverBrowserStoreContext } from \"../stores/beatSaver\";\n\nconst BeatSaverBrowser = () => {\n  const [page, setPage] = useState(0);\n  const songStore = useContext(BeatSaverBrowserStoreContext);\n  const songsList = songStore.songsList;\n\n  useEffect(() => songStore.fetchSongs(page, \"plays\"), [page]);\n\n  return (\n    <Table width=\"200px\">\n      <Button onClick={songStore.fetchSongs}>Load</Button>\n      <Table.Head height={42}>\n        <Table.HeaderCell flexBasis={40} flexGrow={0} />\n        <Table.HeaderCell flexBasis={60} flexGrow={0}>\n          Cover\n        </Table.HeaderCell>\n      </Table.Head>\n      <Droppable droppableId=\"BEAT_SAVER_BROWSER\" isDropDisabled={true}>\n        {(provided, snapshot) => (\n          <Table.Body\n            display=\"flex\"\n            flexDirection=\"column\"\n            ref={provided.innerRef}\n          >\n            {songsList.map((s, idx) => (\n              <Draggable\n                key={s.hash}\n                draggableId={`browser-${s.hash}`}\n                index={idx}\n              >\n                {(provided, snapshot) => (\n                  <Table.Row\n                    height={40}\n                    key={s.hash}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                  >\n                    <Table.TextCell>{s.name}</Table.TextCell>\n                  </Table.Row>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Table.Body>\n        )}\n      </Droppable>\n    </Table>\n  );\n};\n\nexport default observer(BeatSaverBrowser);\n","import { Button } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\";\n\nconst PlaylistImporter = ({ onImportClick, ...props }) => {\n  return (\n    <Button\n      onClick={() => {\n        var element = document.createElement(\"input\");\n        element.setAttribute(\"type\", \"file\");\n        element.setAttribute(\"multiple\", true);\n        element.setAttribute(\"accept\", \".bplist,.json\");\n\n        element.addEventListener(\"change\", async (e) => {\n          const files = Object.values(e.target.files);\n          // assume bplist and json files can be parsed as json\n          const playlists = await Promise.all(\n            files.map(async (file) => ({\n              type: file.name.split(\".\")[1],\n              data: JSON.parse(await file.text()),\n            }))\n          );\n          onImportClick(playlists);\n        });\n\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n      }}\n      {...props}\n    >\n      Import playlist(s)\n    </Button>\n  );\n};\n\nexport default observer(PlaylistImporter);\n","import { useContext } from \"react\";\nimport { Heading, Checkbox, Button, toaster } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\";\n\nimport PlaylistImporter from \"./PlaylistImporter\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\n\nimport { PlaylistStoreContext } from \"../stores/playlists\";\n\nimport { camelCaseToWords } from \"../utils/string\";\n\nexport const Sidebar = () => {\n  const preferences = useContext(UserPreferencesContext);\n  const horizontalMode = preferences.playlistHorizontalMode;\n  const columnsToShow = preferences.playlistColumnsToShow;\n\n  const playlistStore = useContext(PlaylistStoreContext);\n  return (\n    <>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <Button\n          onClick={() => {\n            playlistStore.createNewPlaylist();\n            toaster.success(\"New Playlist created.\");\n          }}\n          marginBottom=\"10px\"\n        >\n          Add new playlist\n        </Button>\n        <PlaylistImporter\n          marginBottom=\"10px\"\n          onImportClick={async (playlists) => {\n            const promises = playlists.map((playlist) =>\n              playlistStore.addPlaylistFromBplistData(playlist.data)\n            );\n            const out = await Promise.all(promises); // can check type here\n            toaster.success(\n              `Successfully imported ${out.length} playlist${\n                out.length === 1 ? \"\" : \"s\"\n              }.`\n            );\n          }}\n        />\n        <Button\n          onClick={() => {\n            preferences.showBeatSaverBrowser =\n              !preferences.showBeatSaverBrowser;\n          }}\n          marginBottom=\"10px\"\n        >\n          {preferences.showBeatSaverBrowser\n            ? \"Hide BeatSaver browser\"\n            : \"Show BeatSaver browser\"}\n        </Button>{\" \"}\n      </div>\n      <Heading>Playlists Config</Heading>\n      <Checkbox\n        label=\"Horizontal Mode\"\n        checked={horizontalMode}\n        onChange={(e) => {\n          preferences.playlistHorizontalMode = e.target.checked;\n        }}\n      />\n\n      <Heading>Columns To Show</Heading>\n      {Object.keys(preferences.playlistColumnsToShow).map((key) => (\n        <Checkbox\n          key={key}\n          label={camelCaseToWords(key)}\n          checked={columnsToShow[key]}\n          onChange={(e) =>\n            preferences.setPlaylistColumnToShow(key, e.target.checked)\n          }\n        />\n      ))}\n    </>\n  );\n};\n\nexport default observer(Sidebar);\n","import { Pane, Heading } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\"; // may not need it\n\nexport const Navbar = () => (\n  <Pane\n    width=\"100%\"\n    height=\"50px\"\n    display=\"flex\"\n    flexDirection=\"row\"\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    paddingLeft=\"20px\"\n    paddingRight=\"20px\"\n    paddingTop=\"10px\"\n    paddingBottom=\"10px\"\n    backgroundColor=\"#012548\"\n  >\n    <Heading color=\"white\">BeaterList</Heading>\n  </Pane>\n);\nexport default observer(Navbar);\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nimport { Pane, toaster } from \"evergreen-ui\";\nimport PlaylistsContainer from \"./components/PlaylistsContainer\";\nimport BeatSaverBrowser from \"./components/BeatSaverBrowser\";\nimport { UserPreferencesContext } from \"./stores/preferences\";\nimport Sidebar from \"./components/Sidebar\";\nimport TopNavbar from \"./components/TopNavbar\";\n\nimport { onDragEnd } from \"./controllers/dragAndDrop\";\n\n// TodO:\n// persist config\n// delete playlist?\n// create playlists\n// add songs by hash?\n// playlist import to persist playlist\n// list to list exchanges\n// image for new playlist\n// placeholder for empty playlist\n// playlist title edit collision check\n// (import will need to do replacement checks)\n\n// load in playlist browser (beat saver), to drag playlists in\n// more columns, beautified difficulties\n\nconst App = () => {\n  const preferences = useContext(UserPreferencesContext);\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      border=\"default\"\n    >\n      <TopNavbar />\n      <div\n        style={{\n          width: \"100%\",\n          flexDirection: \"row\",\n          display: \"flex\",\n        }}\n      >\n        <Pane minWidth=\"300px\" padding={30}>\n          <Sidebar />\n        </Pane>\n\n        <DragDropContext\n          onDragEnd={(props) => {\n            try {\n              onDragEnd(props);\n            } catch (err) {\n              console.error(err);\n              toaster.danger(err.message);\n            }\n          }}\n        >\n          {preferences.showBeatSaverBrowser && <BeatSaverBrowser />}\n          <PlaylistsContainer />\n        </DragDropContext>\n      </div>\n    </Pane>\n  );\n};\n\nexport default observer(App);\n","import { beatSaverBrowserStore } from \"../stores/beatSaver\";\nimport { playlistStore } from \"../stores/playlists\";\n\nexport const onDragEnd = ({ destination, source }) => {\n  // the only one that is required\n  console.log(destination, source);\n  if (!destination || !source) {\n    return;\n  }\n  const destIdx = destination.index;\n  const sourceIdx = source.index;\n\n  // beat saver browser logic\n  if (source.droppableId === \"BEAT_SAVER_BROWSER\") {\n    const destinationPlaylist = playlistStore.playlists.find(\n      (p) => p.id === destination.droppableId\n    );\n    const songToAdd = beatSaverBrowserStore.songsList[source.index];\n    console.log(\"hiyaya\", songToAdd.hash);\n    destinationPlaylist.addSongBySongData(songToAdd, destIdx);\n    playlistStore.saveAllPlaylists();\n    return;\n  }\n\n  // playlists reordering logic\n  if (\n    source.droppableId === \"playlists\" &&\n    destination.droppableId === \"playlists\"\n  ) {\n    const playlistToMove = playlistStore.playlists[source.index];\n    playlistStore.movePlaylist(playlistToMove, destination.index);\n    return;\n  }\n\n  if (destination.droppableId === source.droppableId && destIdx === sourceIdx) {\n    return;\n  }\n\n  // droppableId are playlist unique ids\n  // very kludgey, should use some id?\n  const sourcePlaylist = playlistStore.playlists.find(\n    (p) => p.id === source.droppableId\n  );\n  // move within list\n  if (destination.droppableId === source.droppableId) {\n    const songToMove = sourcePlaylist.songs[sourceIdx];\n    sourcePlaylist.removeSong(songToMove); // could be optimized, currently does extra search\n    sourcePlaylist.insertSongAtIdx(songToMove, destIdx);\n    console.log(\"moving within\", songToMove, sourceIdx, destIdx);\n  } else {\n    // move across list\n    const destinationPlaylist = playlistStore.playlists.find(\n      (p) => p.id === destination.droppableId\n    );\n    const songToMove = sourcePlaylist.songs[sourceIdx];\n\n    if (\n      destinationPlaylist.songs.find((song) => song.hash === songToMove.hash)\n    ) {\n      throw Error(\"Song already exists in this playlist.\");\n    }\n\n    sourcePlaylist.removeSong(songToMove);\n    destinationPlaylist.insertSongAtIdx(songToMove, destIdx);\n  }\n  playlistStore.saveAllPlaylists();\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { PlaylistStoreContext, playlistStore } from \"./stores/playlists\";\nimport {\n  UserPreferencesContext,\n  userPreferencesStore,\n} from \"./stores/preferences\";\nimport {\n  BeatSaverBrowserStoreContext,\n  beatSaverBrowserStore,\n} from \"./stores/beatSaver\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlaylistStoreContext.Provider value={playlistStore}>\n      <BeatSaverBrowserStoreContext.Provider value={beatSaverBrowserStore}>\n        <UserPreferencesContext.Provider value={userPreferencesStore}>\n          <App />\n        </UserPreferencesContext.Provider>\n      </BeatSaverBrowserStoreContext.Provider>\n    </PlaylistStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}