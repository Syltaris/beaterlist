{"version":3,"sources":["components/PlaylistTable/components/Header.js","stores/preferences.js","utils/string.js","components/PlaylistTable/components/SongList.js","components/PlaylistTable/index.js","components/PlaylistTable/PlaylistTable.js","controllers/api.js","stores/beatSaver.js","stores/songs.js","stores/playlists.js","components/PlaylistsContainer.js","components/BeatSaverBrowser.js","components/PlaylistImporter.js","components/Sidebar.js","components/TopNavbar.js","controllers/dragAndDrop.js","App.js","reportWebVitals.js","index.js"],"names":["observer","playlist","useState","editTextData","setEditTextData","showDeleteConfirmation","setShowDeleteConfirmation","showAddDialog","setShowAddDialog","showAddSongLoader","setShowAddSongLoader","addSongError","setAddSongError","songKeyInput","setSongKeyInput","title","titleInput","setTitleInput","author","authorInput","setAuthorInput","Pane","display","flexDirection","alignItems","padding","Avatar","src","image","name","size","onClick","callback","inputElement","document","createElement","type","accept","multiple","addEventListener","dispatchEvent","MouseEvent","openFileDialog","event","baseURL","reader","FileReader","file","target","files","readAsDataURL","onload","result","Heading","margin","TextInput","value","width","onChange","e","IconButton","icon","TickIcon","intent","marginLeft","CrossIcon","style","marginRight","Tooltip","content","EditIcon","FloppyDiskIcon","bplistJson","asBplistJson","element","setAttribute","encodeURIComponent","JSON","stringify","body","appendChild","click","removeChild","exportPlaylist","DeleteIcon","AddIcon","Dialog","isShown","onCloseComplete","onConfirm","delete","confirmLabel","shouldCloseOnOverlayClick","a","addSongByKey","console","log","Spinner","isInvalid","bplistSongKeys","userPreferencesStore","_playlistsHorizontalMode","_playlistColumnsToShow","undefined","makeAutoObservable","this","store","get","output","forEach","key","initColumnsToShow","flag","set","columns","Object","entries","filter","map","length","keys","UserPreferencesContext","createContext","camelCaseToWords","text","replace","charAt","toUpperCase","slice","getColText","song","difficulties","join","getTableCellPropsForCol","props","flexBasis","flexGrow","flexShrink","includes","getColHeaderText","DraggableRow","idx","playlistId","onRemoveSongClick","columnsToShow","useContext","getPlaylistColumnNamesToShow","draggableId","hash","index","provided","Table","Row","isSelectable","height","ref","innerRef","draggableProps","dragHandleProps","Cell","DragHandleHorizontalIcon","coverURL","TextCell","getTableCellForCol","songToRemove","setSongToRemove","minWidth","overflowX","Head","HeaderCell","TextHeaderCell","Body","overflow","droppableId","id","snapshot","minHeight","songs","placeholder","removeSong","PlaylistTable","getMapByHash","fetch","json","getMapByKey","songKey","getBeatSaverMapList","page","beatSaverBrowserStore","_songsList","fetchSongs","resp","songsList","docs","BeatSaverBrowserStoreContext","beatSaverSongCache","songCache","data","hashes","rateLimitDelay","missingHashes","Promise","res","setTimeout","retrieveSongData","Song","savedSong","_hash","beatSaverSongObject","getSongDataByHash","metadata","songName","songAuthorName","levelAuthorName","description","stats","downloads","plays","upVotes","downVotes","Number","parseFloat","rating","toPrecision","Date","uploaded","toLocaleDateString","levelid","characteristics","flatMap","characteristic","Playlist","savedPlaylist","_id","_image","_title","_author","_songs","saveAllPlaylists","deletePlaylist","indexOf","splice","songData","find","manualAddSongData","push","s","asJson","playlistTitle","playlistAuthor","playlistStore","_playlists","addPlaylistFromBplistData","retrieveMultipleSongData","getNewId","appendPlaylist","savedPlaylists","playlists","allIds","p","newId","uuidv4","playlistsJson","PlaylistStoreContext","PlaylistsViewer","userPreferences","playlistHorizontalMode","border","playlistKey","PlaylistsContainer","songStore","useEffect","Button","isDropDisabled","onImportClick","FilePicker","all","split","parse","preferences","horizontalMode","playlistColumnsToShow","Checkbox","label","checked","setPlaylistColumnToShow","promises","out","createNewPlaylist","justifyContent","paddingLeft","paddingRight","paddingTop","paddingBottom","backgroundColor","color","onDragEnd","destination","source","destIdx","sourceIdx","destinationPlaylist","songToAdd","addSongBySongData","sourcePlaylist","songToMove","insertSongAtIdx","playlistToMove","movePlaylist","TopNavbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.302c43e6.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Avatar,\n  Heading,\n  FloppyDiskIcon,\n  EditIcon,\n  Tooltip,\n  TextInput,\n  Pane,\n  Button,\n  DeleteIcon,\n  Dialog,\n  AddIcon,\n  Spinner,\n  IconButton,\n  TickIcon,\n  CrossIcon,\n} from \"evergreen-ui\";\n\nconst exportPlaylist = (playlist) => {\n  const bplistJson = playlist.asBplistJson();\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(bplistJson))\n  );\n  element.setAttribute(\"download\", `${playlist.title}.bplist`);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nfunction openFileDialog(callback) {\n  // this function must be called from  a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement(\"input\");\n  // Set its type to file\n  inputElement.type = \"file\";\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  inputElement.accept = \"image/*\";\n  // Accept multiple files\n  inputElement.multiple = false;\n  // set onchange event to call callback when user has selected file\n  inputElement.addEventListener(\"change\", callback);\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent(\"click\"));\n}\n\nexport const Header = ({ playlist }) => {\n  const [editTextData, setEditTextData] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAddSongLoader, setShowAddSongLoader] = useState(false);\n  const [addSongError, setAddSongError] = useState(false);\n  const [songKeyInput, setSongKeyInput] = useState(\"\");\n\n  const [titleInput, setTitleInput] = useState(playlist.title);\n  const [authorInput, setAuthorInput] = useState(playlist.author);\n  return (\n    <Pane display=\"flex\" flexDirection=\"row\" alignItems=\"center\" padding=\"5px\">\n      <Avatar\n        src={playlist.image && \"data:image/png;\" + playlist.image}\n        name={playlist.title}\n        size={50}\n        onClick={() => {\n          // get image upload and replace image in base64\n          openFileDialog((event) => {\n            let baseURL = \"\";\n            const reader = new FileReader();\n            const file = event.target.files[0];\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n              baseURL = reader.result;\n              playlist.image = baseURL;\n            };\n          });\n        }}\n      />\n      <Heading margin={10}>\n        {editTextData ? (\n          <>\n            <TextInput\n              value={titleInput}\n              width=\"100px\"\n              onChange={(e) => setTitleInput(e.target.value)}\n            />{\" \"}\n            -{\" \"}\n            <TextInput\n              value={authorInput}\n              width=\"100px\"\n              onChange={(e) => setAuthorInput(e.target.value)}\n            />\n            <IconButton\n              icon={TickIcon}\n              intent=\"success\"\n              onClick={() => {\n                playlist.title = titleInput;\n                playlist.author = authorInput;\n                setEditTextData(false);\n              }}\n              marginLeft=\"2px\"\n            />\n            <IconButton\n              icon={CrossIcon}\n              intent=\"danger\"\n              onClick={() => {\n                setTitleInput(playlist.title);\n                setAuthorInput(playlist.author);\n                setEditTextData(false);\n              }}\n              marginLeft=\"2px\"\n            />\n          </>\n        ) : (\n          <>\n            {playlist.title} - {playlist.author}\n          </>\n        )}\n      </Heading>\n      <div style={{ marginLeft: \"auto\", marginRight: 0 }}>\n        <Tooltip content=\"Edit Title & Author\">\n          <IconButton\n            icon={EditIcon}\n            onClick={() => setEditTextData(!editTextData)}\n            marginRight=\"2px\"\n          />\n        </Tooltip>\n        <Tooltip content=\"Download\">\n          <IconButton\n            icon={FloppyDiskIcon}\n            marginRight=\"2px\"\n            onClick={() => exportPlaylist(playlist)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Delete\">\n          <IconButton\n            icon={DeleteIcon}\n            marginRight=\"2px\"\n            onClick={() => setShowDeleteConfirmation(true)}\n          />\n        </Tooltip>\n        <Tooltip content=\"Add new song\">\n          <IconButton\n            icon={AddIcon}\n            marginRight=\"2px\"\n            onClick={() => setShowAddDialog(true)}\n          />\n        </Tooltip>\n      </div>\n      <Dialog\n        /* this will vanish immediatetly on confirm, can consider moving out to global modals */\n        isShown={showDeleteConfirmation}\n        title={`Delete ${playlist.title}?`}\n        onCloseComplete={() => setShowDeleteConfirmation(false)}\n        onConfirm={() => {\n          playlist.delete();\n          setShowDeleteConfirmation(false);\n        }}\n        confirmLabel={\"Confirm\"}\n        intent=\"danger\"\n      >\n        This action is irreverisble!\n      </Dialog>\n\n      <Dialog\n        shouldCloseOnOverlayClick={false}\n        isShown={showAddDialog}\n        title={`Add new song to ${playlist.title}`}\n        onCloseComplete={() => setShowAddDialog(false)}\n        onConfirm={async () => {\n          try {\n            setAddSongError(false);\n            setShowAddSongLoader(true);\n            await playlist.addSongByKey(songKeyInput);\n          } catch (err) {\n            setAddSongError(true);\n            console.log(err);\n          } finally {\n            setShowAddSongLoader(false);\n          }\n        }}\n        confirmLabel={\"Add\"}\n      >\n        {showAddSongLoader && <Spinner />}\n        Add the song key you want to add here:\n        <TextInput\n          isInvalid={addSongError}\n          value={songKeyInput}\n          onChange={(e) => setSongKeyInput(e.target.value)}\n        ></TextInput>\n      </Dialog>\n    </Pane>\n  );\n};\n\nexport default observer(Header);\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst bplistSongKeys = [\n  \"cover\",\n  \"name\",\n  \"songAuthor\",\n  \"levelAuthor\",\n  \"difficulties\",\n  \"downloads\",\n  \"plays\",\n  \"upvotes\",\n  \"downvotes\",\n  \"rating\",\n  \"uploadDate\",\n  \"key\",\n  \"hash\",\n  \"description\",\n];\n\nconst initColumnsToShow = () => {\n  const output = {};\n  bplistSongKeys.forEach((key) => (output[key] = false));\n  return output;\n};\n\nclass UserPreferencesStore {\n  _playlistsHorizontalMode = false;\n  _playlistColumnsToShow = undefined;\n\n  constructor() {\n    makeAutoObservable(this);\n    this._playlistsHorizontalMode =\n      store.get(\"playlistHorizontalMode\") || false;\n    this._playlistColumnsToShow =\n      store.get(\"playlistColumnsToShow\") || initColumnsToShow();\n  }\n\n  get playlistHorizontalMode() {\n    return this._playlistsHorizontalMode;\n  }\n  set playlistHorizontalMode(flag) {\n    this._playlistsHorizontalMode = flag;\n    store.set(\"playlistHorizontalMode\", this._playlistsHorizontalMode);\n  }\n\n  get playlistColumnsToShow() {\n    return this._playlistColumnsToShow;\n  }\n  set playlistColumnsToShow(columns) {\n    this._playlistColumnsToShow = columns;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow); // probably can autorun the save function\n  }\n\n  setPlaylistColumnToShow(key, flag) {\n    this._playlistColumnsToShow[key] = flag;\n    store.set(\"playlistColumnsToShow\", this._playlistColumnsToShow);\n  }\n  getPlaylistColumnNamesToShow() {\n    const columns = Object.entries(this._playlistColumnsToShow)\n      .filter(([_, value]) => value)\n      .map(([key, _]) => key);\n    if (columns.length === 0) {\n      return Object.keys(this._playlistColumnsToShow);\n    }\n    return columns;\n  }\n}\n\nexport const userPreferencesStore = new UserPreferencesStore();\nexport const UserPreferencesContext = createContext(userPreferencesStore);\n","export const camelCaseToWords = (text) => {\n  var result = text.replace(/([A-Z])/g, \" $1\");\n  var finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n  return finalResult;\n};\n","import { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Table,\n  Avatar,\n  DragHandleHorizontalIcon,\n  DeleteIcon,\n  Dialog,\n} from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { UserPreferencesContext } from \"../../../stores/preferences\";\n\nimport { camelCaseToWords } from \"../../../utils/string\";\n\nconst getColText = (key, song) => {\n  // special cases\n  switch (key) {\n    case \"difficulties\":\n      return Object.entries(song.difficulties)\n        .filter(([key, value]) => value)\n        .map(([key, _]) => key)\n        .join(\",\");\n    default:\n      break;\n  }\n\n  // very dirty way to parse out the relevant col data\n  if (key in song) {\n    return song[key];\n  }\n};\n\nconst getTableCellPropsForCol = (key) => {\n  let props = {\n    flexBasis: 120,\n    flexGrow: 0,\n    flexShrink: 0,\n  };\n  if (key === \"description\") {\n    props = {\n      flexBasis: 600,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (key === \"cover\") {\n    props = {\n      flexBasis: 60,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (key === \"hash\") {\n    props = {\n      flexBasis: 300,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  } else if (\n    [\"downloads\", \"plays\", \"upvotes\", \"downvotes\", \"rating\", \"key\"].includes(\n      key\n    )\n  ) {\n    // small width cells\n    props = {\n      flexBasis: 72,\n      flexGrow: 0,\n      flexShrink: 0,\n    };\n  }\n\n  return props;\n};\n\nconst getTableCellForCol = (key, song) => {\n  if (key === \"cover\") {\n    return (\n      <Table.Cell {...getTableCellPropsForCol(key)}>\n        <Avatar src={song.coverURL} size={40} />\n      </Table.Cell>\n    );\n  }\n\n  return (\n    <Table.TextCell key={key} {...getTableCellPropsForCol(key)}>\n      {getColText(key, song)}\n    </Table.TextCell>\n  );\n};\n\nconst getColHeaderText = (key) => {\n  // to handle special small width text\n  switch (key) {\n    case \"upvotes\":\n      return \"👍\";\n    case \"downvotes\":\n      return \"👎\";\n    case \"downloads\":\n      return \"💾\";\n    case \"plays\":\n      return \"▶️\";\n    case \"rating\":\n      return \"💯\";\n    case \"key\":\n      return \"🔑\";\n    default:\n      return camelCaseToWords(key);\n  }\n};\n\nconst DraggableRow = ({ idx, playlistId, song, onRemoveSongClick }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n  return (\n    <Draggable\n      key={song.hash}\n      draggableId={`${playlistId}-${song.hash}`}\n      index={idx}\n    >\n      {(provided) => (\n        <Table.Row\n          key={song.hash}\n          isSelectable\n          height={42}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Table.Cell flexBasis={40} flexGrow={0} flexShrink={0}>\n            <DragHandleHorizontalIcon />\n          </Table.Cell>\n          {columnsToShow.map((key) => getTableCellForCol(key, song))}\n          <Table.Cell\n            flexBasis={35}\n            flexGrow={0}\n            flexShrink={0}\n            marginRight={0}\n            marginLeft=\"auto\"\n          >\n            <DeleteIcon onClick={() => onRemoveSongClick(song)} />\n          </Table.Cell>\n        </Table.Row>\n      )}\n    </Draggable>\n  );\n};\n\nexport const SongList = ({ playlist }) => {\n  const preferences = useContext(UserPreferencesContext);\n  const columnsToShow = preferences.getPlaylistColumnNamesToShow();\n\n  const [songToRemove, setSongToRemove] = useState(null);\n  return (\n    <Table minWidth=\"300px\" overflowX=\"scroll\">\n      <Table.Head height={42}>\n        <Table.HeaderCell flexBasis={40} flexGrow={0} />\n        {columnsToShow.map((key) => (\n          <Table.TextHeaderCell key={key} {...getTableCellPropsForCol(key)}>\n            {getColHeaderText(key)}\n          </Table.TextHeaderCell>\n        ))}\n        <Table.HeaderCell\n          flexBasis={35}\n          flexGrow={0}\n          flexShrink={0}\n          marginRight={0}\n          marginLeft=\"auto\"\n        />\n      </Table.Head>\n      <Table.Body overflow=\"visible\">\n        <Droppable key={playlist.id} droppableId={playlist.id}>\n          {(provided, snapshot) => (\n            <div ref={provided.innerRef} style={{ minHeight: \"40px\" }}>\n              {playlist.songs.map((song, idx) => (\n                <DraggableRow\n                  idx={idx}\n                  playlistId={playlist.id}\n                  song={song}\n                  onRemoveSongClick={(song) => setSongToRemove(song)}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </Table.Body>\n      <Dialog\n        isShown={!!songToRemove}\n        title={`Delete ${songToRemove?.name} from ${playlist.title}?`}\n        onCloseComplete={() => setSongToRemove(null)}\n        onConfirm={() => {\n          playlist.removeSong(songToRemove);\n          setSongToRemove(null);\n        }}\n        confirmLabel={\"Confirm\"}\n        intent=\"danger\"\n      >\n        This action is irreverisble!\n      </Dialog>\n    </Table>\n  );\n};\n\nexport default observer(SongList);\n","import PlaylistTable from \"./PlaylistTable\";\nexport default PlaylistTable;\n","import { observer } from \"mobx-react-lite\";\n\nimport Header from \"./components/Header\";\nimport SongList from \"./components/SongList\";\n\n// TODO: handle json types seperately\nconst PlaylistTable = ({ playlist }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 20,\n      }}\n    >\n      <Header playlist={playlist} />\n      <SongList playlist={playlist} />\n    </div>\n  );\n};\n\nexport default observer(PlaylistTable);\n","export const getMapByHash = async (hash) => {\n  return (await fetch(`https://beatsaver.com/api/maps/by-hash/${hash}`)).json();\n};\n\nexport const getMapByKey = async (songKey) => {\n  return await fetch(`https://beatsaver.com/api/maps/detail/${songKey}`);\n};\n\nexport const getBeatSaverMapList = async (page, type = \"hot\") => {\n  return (await fetch(`https://beatsaver.com/api/maps/${type}/${page}`)).json();\n};\n","import { createContext } from \"react\";\nimport store from \"store\";\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getBeatSaverMapList, getMapByHash } from \"../controllers/api\";\n\n// beat saver server songs\nclass BeatSaverBrowserStore {\n  _songsList = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  fetchSongs = async (page, type) => {\n    const resp = await getBeatSaverMapList(page, type);\n    console.log(resp);\n    this.songsList = resp.docs;\n  };\n\n  get songsList() {\n    return this._songsList;\n  }\n\n  set songsList(songsList) {\n    this._songsList = songsList;\n  }\n}\n\nexport const beatSaverBrowserStore = new BeatSaverBrowserStore();\nexport const BeatSaverBrowserStoreContext = createContext(\n  beatSaverBrowserStore\n);\n\n// stores a cache of beat-saver song data\nclass BeatSaverSongCache {\n  songCache = null;\n\n  constructor() {\n    this.songCache = store.get(\"songCache\") ?? {}; // hash: data\n  }\n\n  manualAddSongData(data) {\n    this.songCache[data.hash] = data;\n    store.set(\"songCache\", this.songCache);\n  }\n\n  async retrieveSongData(hash) {\n    if (!(hash in this.songCache)) {\n      const resp = await getMapByHash(hash);\n      this.songCache[hash] = resp;\n    } // else, skip (unless needs to overwrite for some reason?)\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  // would love to use Promise.all if no rate limit :(\n  async retrieveMultipleSongData(hashes, rateLimitDelay = 100) {\n    const missingHashes = hashes.filter((hash) => !(hash in this.songCache));\n    console.log(\"getting hashes\", missingHashes);\n    for (const hash of missingHashes) {\n      console.log(\"getting from beat-saver server \", hash);\n      const resp = await getMapByHash(hash);\n      await new Promise((res) => setTimeout(res, rateLimitDelay)); // sleep\n      this.songCache[hash] = resp;\n    }\n\n    store.set(\"songCache\", this.songCache);\n  }\n\n  getSongDataByHash(hash) {\n    if (!(hash in this.songCache)) {\n      this.retrieveSongData(hash);\n    }\n    return this.songCache[hash];\n  }\n}\n\nexport const beatSaverSongCache = new BeatSaverSongCache();\n","import { beatSaverSongCache } from \"./beatSaver\";\n\nexport class Song {\n  _hash = null; // unique id\n  beatSaverSongObject = undefined; // data object retrieve from beat-saver server\n\n  constructor(savedSong) {\n    this._hash = savedSong.hash;\n    this.beatSaverSongObject = beatSaverSongCache.getSongDataByHash(this.hash);\n  }\n\n  get hash() {\n    return this._hash;\n  }\n\n  get coverURL() {\n    return \"https://beatsaver.com\" + this.beatSaverSongObject?.coverURL;\n  }\n  get name() {\n    return this.beatSaverSongObject?.metadata.songName;\n  }\n  get songAuthor() {\n    return this.beatSaverSongObject?.metadata.songAuthorName;\n  }\n  get levelAuthor() {\n    return this.beatSaverSongObject?.metadata.levelAuthorName;\n  }\n  get difficulties() {\n    return this.beatSaverSongObject?.metadata.difficulties;\n  }\n  get description() {\n    return this.beatSaverSongObject?.description;\n  }\n\n  get downloads() {\n    return this.beatSaverSongObject?.stats.downloads;\n  }\n  get plays() {\n    return this.beatSaverSongObject?.stats.plays;\n  }\n  get upvotes() {\n    return this.beatSaverSongObject?.stats.upVotes;\n  }\n  get downvotes() {\n    return this.beatSaverSongObject?.stats.downVotes;\n  }\n  get rating() {\n    return Number.parseFloat(\n      this.beatSaverSongObject?.stats.rating * 100 ?? 0.0\n    ).toPrecision(2);\n  }\n  get uploadDate() {\n    return new Date(this.beatSaverSongObject?.uploaded).toLocaleDateString();\n  }\n  get key() {\n    return this.beatSaverSongObject?.key;\n  }\n\n  asJson() {\n    // only need hash, as the rest of the data can be retrieved from cache\n    return {\n      hash: this.hash,\n    };\n  }\n\n  asBplistJson() {\n    return {\n      hash: this.hash,\n      levelid: `custom_level_${this.hash}`,\n      songName: this.beatSaverSongObject.metadata.name,\n      levelAuthorName: this.beatSaverSongObject.metadata.levelAuthorName,\n      difficulties: this.beatSaverSongObject.metadata.characteristics.flatMap(\n        (characteristic) =>\n          Object.entries(characteristic.difficulties)\n            .filter(([key, value]) => value !== null)\n            .map(([key, value]) => ({\n              characteristic: characteristic.name,\n              name: key,\n            }))\n      ),\n    };\n  }\n}\n\n/*\n{\n    \"metadata\":{\n        \"difficulties\":{\"easy\":false,\"normal\":true,\"hard\":true,\"expert\":true,\"expertPlus\":false},\n        \"duration\":0,\n        \"automapper\":null,\n        \"characteristics\":[\n            {\n                \"name\":\"Standard\",\n                \"difficulties\": {\n                    \"easy\":null,\n                    \"normal\":{\"duration\":355.7663269042969,\"length\":167,\"bombs\":334,\"notes\":375,\"obstacles\":9,\"njs\":10,\"njsOffset\":0},\n                    \"hard\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":306,\"notes\":480,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expert\":{\"duration\":355.7450866699219,\"length\":167,\"bombs\":138,\"notes\":662,\"obstacles\":3,\"njs\":10,\"njsOffset\":0},\n                    \"expertPlus\":null\n                }\n            }\n        ],\n        \"songName\":\"Technologic\",\n        \"songSubName\":\"Daft Punk\",\n        \"songAuthorName\":\"Awfulnaut\",\n        \"levelAuthorName\":\"awfulnaut\",\n        \"bpm\":127\n    },\n    \"stats\":{\n        \"downloads\":428745,\n        \"plays\":6632,\n        \"downVotes\":186,\n        \"upVotes\":9789,\n        \"heat\":120.6632514,\n        \"rating\":0.9512470277249632\n    },\n    \"description\":\"Expert / Hard / Normal\",\n    \"deletedAt\":null,\n    \"_id\":\"5cff620e48229f7d88fc67a8\",\n    \"key\":\"747\",\n    \"name\":\"Technologic - Daft Punk (Update)\",\n    \"uploader\":{\"_id\":\"5cff0b7398cc5a672c84edac\",\"username\":\"awfulnaut\"},\n    \"uploaded\":\"2018-06-30T18:30:38.000Z\",\n    \"hash\":\"831247d7d02e948e5d03622748bb130b5057023d\",\n    \"directDownload\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.zip\",\n    \"downloadURL\":\"/api/download/key/747\",\n    \"coverURL\":\"/cdn/747/831247d7d02e948e5d03622748bb130b5057023d.jpg\"\n}\n*/\n","import { createContext } from \"react\";\nimport store from \"store\";\nimport { makeAutoObservable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Song } from \"./songs\";\nimport { beatSaverSongCache } from \"./beatSaver\";\nimport { getMapByKey } from \"../controllers/api\";\n\nexport class Playlist {\n  _id = null;\n  _image = null; // base64\n  _title = \"\";\n  _author = \"\";\n  _songs = []; // array of Songs\n\n  store = undefined;\n\n  constructor(savedPlaylist, store) {\n    makeAutoObservable(this);\n    this._id = savedPlaylist.id; // custom id\n    this._image = savedPlaylist.image;\n    this._title = savedPlaylist.title;\n    this._author = savedPlaylist.author;\n    this._songs = savedPlaylist.songs.map((song) => new Song(song));\n    this.store = store;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get image() {\n    return this._image;\n  }\n  set image(image) {\n    this._image = image;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get title() {\n    return this._title;\n  }\n  set title(title) {\n    this._title = title;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get author() {\n    return this._author;\n  }\n  set author(author) {\n    this._author = author;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  get songs() {\n    return this._songs;\n  }\n  set songs(songs) {\n    this._songs = songs;\n    this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n  }\n\n  delete() {\n    this.store.deletePlaylist(this);\n  }\n\n  removeSong(song) {\n    const idx = this._songs.indexOf(song);\n    this._songs.splice(idx, 1);\n  }\n\n  insertSongAtIdx(song, idx) {\n    this._songs.splice(idx, 0, song);\n  }\n\n  async addSongByKey(songKey) {\n    // try to find song in beat-saver\n    // if have, save the data, and the song, save the playlist after\n    // if not, do nothing\n    try {\n      const resp = await getMapByKey(songKey);\n      const songData = await resp.json();\n      console.log(songData);\n      const duplicateSong = this._songs.find(\n        (song) => song.hash === songData.hash\n      );\n      if (duplicateSong) {\n        return; // should show some error here tho\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.push(new Song({ hash: songData.hash }));\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async addSongBySongData(songData, idx = undefined) {\n    const hash = songData.hash;\n    if (idx === undefined) {\n      idx = this._songs.length;\n    }\n    try {\n      if (this._songs.find((s) => s.hash === hash)) {\n        return; // should show some dup error\n      }\n      beatSaverSongCache.manualAddSongData(songData);\n      this._songs.splice(idx, 0, new Song({ hash })); // let Song handle fetching\n      this.store.saveAllPlaylists(); // quite expensive, should only save itself in the future\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  asJson() {\n    return {\n      id: this._id,\n      image: this.image,\n      title: this.title,\n      author: this.author,\n      songs: this.songs.map((song) => song.asJson()),\n    };\n  }\n\n  asBplistJson() {\n    return {\n      image: this.image,\n      playlistTitle: this.title,\n      playlistAuthor: this.author,\n      songs: this.songs.map((song) => song.asBplistJson()),\n    };\n  }\n}\n\nclass PlaylistStore {\n  _playlists = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    const savedPlaylists = store.get(\"playlists\");\n    if (savedPlaylists) {\n      const playlists = [];\n      for (const playlist of savedPlaylists) {\n        playlists.push(new Playlist(playlist, this)); // converts json to Playlist objects\n      }\n      this._playlists = playlists;\n    }\n  }\n\n  get playlists() {\n    return this._playlists;\n  }\n\n  getNewId() {\n    const allIds = [this._playlists.map((p) => p.id)];\n    let newId = uuidv4();\n\n    while (allIds.includes(newId)) {\n      newId = uuidv4();\n    }\n\n    return newId;\n  }\n\n  createNewPlaylist() {\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: null,\n        title: \"New Playlist\",\n        author: \"Beaterlist\",\n        songs: [],\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  }\n\n  appendPlaylist(playlist) {\n    this._playlists.push(playlist);\n    this.saveAllPlaylists();\n  }\n\n  deletePlaylist(playlist) {\n    const idx = this._playlists.indexOf(playlist);\n    this._playlists.splice(idx, 1);\n    this.saveAllPlaylists();\n  }\n\n  movePlaylist(playlist, idx) {\n    this._playlists.splice(this._playlists.indexOf(playlist), 1);\n    this._playlists.splice(idx, 0, playlist);\n    this.saveAllPlaylists();\n  }\n\n  saveAllPlaylists() {\n    const playlistsJson = this._playlists.map((playlist) => playlist.asJson());\n    store.set(\"playlists\", playlistsJson);\n  }\n\n  addPlaylistFromBplistData = async (data) => {\n    // do preloading here for multiple songs\n    await beatSaverSongCache.retrieveMultipleSongData(\n      data.songs.map((song) => song.hash)\n    );\n    const playlist = new Playlist(\n      {\n        id: this.getNewId(),\n        image: data.image,\n        title: data.playlistTitle,\n        author: data.playlistAuthor,\n        songs: data.songs,\n      },\n      this\n    );\n    this.appendPlaylist(playlist);\n  };\n}\n\nexport const playlistStore = new PlaylistStore();\nexport const PlaylistStoreContext = createContext(playlistStore);\n","import { useContext } from \"react\";\n\nimport { observer } from \"mobx-react-lite\";\n\nimport { Pane } from \"evergreen-ui\";\nimport PlaylistTable from \"./PlaylistTable/\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\nimport { PlaylistStoreContext } from \"../stores/playlists\";\n\nconst PlaylistsContainer = () => {\n  const userPreferences = useContext(UserPreferencesContext);\n  const playlistStore = useContext(PlaylistStoreContext);\n  return (\n    <PlaylistsViewer\n      userPreferences={userPreferences}\n      playlistStore={playlistStore}\n    />\n  );\n};\n\nconst PlaylistsViewer = observer(({ userPreferences, playlistStore }) => (\n  <div\n    style={{\n      width: userPreferences.playlistHorizontalMode ? \"100%\" : \"50%\",\n      height: \"80vh\",\n      display: \"flex\",\n      flexDirection: userPreferences.playlistHorizontalMode ? \"row\" : \"column\",\n      //justifyContent:\"center\"\n      border: \"default\",\n      //overflowX:\"scroll\"\n    }}\n  >\n    {playlistStore.playlists.map((playlist, idx) => (\n      <PlaylistTable\n        key={`${playlist.title}|${idx}`}\n        playlistKey={`${playlist.title}|${idx}`}\n        playlist={playlist}\n      />\n    ))}\n  </div>\n));\n\nexport default PlaylistsContainer;\n","import { useState, useEffect, useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Table, Button } from \"evergreen-ui\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport { BeatSaverBrowserStoreContext } from \"../stores/beatSaver\";\n\nconst BeatSaverBrowser = () => {\n  const [page, setPage] = useState(0);\n  const songStore = useContext(BeatSaverBrowserStoreContext);\n  const songsList = songStore.songsList;\n\n  useEffect(() => songStore.fetchSongs(page, \"plays\"), [page]);\n\n  return (\n    <Table width=\"200px\">\n      <Button onClick={songStore.fetchSongs}>Load</Button>\n      <Table.Head height={42}>\n        <Table.HeaderCell flexBasis={40} flexGrow={0} />\n        <Table.HeaderCell flexBasis={60} flexGrow={0}>\n          Cover\n        </Table.HeaderCell>\n      </Table.Head>\n      <Droppable droppableId=\"BEAT_SAVER_BROWSER\" isDropDisabled={true}>\n        {(provided, snapshot) => (\n          <Table.Body\n            display=\"flex\"\n            flexDirection=\"column\"\n            ref={provided.innerRef}\n          >\n            {songsList.map((s, idx) => (\n              <Draggable\n                key={s.hash}\n                draggableId={`browser-${s.hash}`}\n                index={idx}\n              >\n                {(provided, snapshot) => (\n                  <Table.Row\n                    height={40}\n                    key={s.hash}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                  >\n                    <Table.TextCell>{s.name}</Table.TextCell>\n                  </Table.Row>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Table.Body>\n        )}\n      </Droppable>\n    </Table>\n  );\n};\n\nexport default observer(BeatSaverBrowser);\n","import React from \"react\";\nimport { FilePicker } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\";\n\nconst PlaylistImporter = ({ onImportClick }) => (\n  <FilePicker\n    multiple\n    accept=\".bplist,.json\"\n    width={250}\n    onChange={async (files) => {\n      // assume bplist and json files can be parsed as json\n      console.log(files);\n      const playlists = await Promise.all(\n        files.map(async (file) => ({\n          type: file.name.split(\".\")[1],\n          data: JSON.parse(await file.text()),\n        }))\n      );\n      onImportClick(playlists);\n    }}\n    placeholder=\"Import playlist(s)\"\n  />\n);\n\nexport default observer(PlaylistImporter);\n","import { useContext } from \"react\";\nimport { Heading, Checkbox, Button } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\";\n\nimport PlaylistImporter from \"./PlaylistImporter\";\n\nimport { UserPreferencesContext } from \"../stores/preferences\";\n\nimport { PlaylistStoreContext } from \"../stores/playlists\";\n\nimport { camelCaseToWords } from \"../utils/string\";\n\nexport const Sidebar = () => {\n  const preferences = useContext(UserPreferencesContext);\n  const horizontalMode = preferences.playlistHorizontalMode;\n  const columnsToShow = preferences.playlistColumnsToShow;\n\n  const playlistStore = useContext(PlaylistStoreContext);\n  return (\n    <>\n      <Heading>Playlists Config</Heading>\n      <Checkbox\n        label=\"Horizontal Mode\"\n        checked={horizontalMode}\n        onChange={(e) => {\n          preferences.playlistHorizontalMode = e.target.checked;\n        }}\n      />\n\n      <Heading>Columns To Show</Heading>\n      {Object.keys(preferences.playlistColumnsToShow).map((key) => (\n        <Checkbox\n          key={key}\n          label={camelCaseToWords(key)}\n          checked={columnsToShow[key]}\n          onChange={(e) =>\n            preferences.setPlaylistColumnToShow(key, e.target.checked)\n          }\n        />\n      ))}\n\n      <PlaylistImporter\n        onImportClick={async (playlists) => {\n          const promises = playlists.map((playlist) =>\n            playlistStore.addPlaylistFromBplistData(playlist.data)\n          );\n          const out = await Promise.all(promises); // can check type here\n          console.log(playlists, \"plist\", out, promises);\n        }}\n      />\n      <Button onClick={() => playlistStore.createNewPlaylist()}>\n        Add new playlist\n      </Button>\n    </>\n  );\n};\n\nexport default observer(Sidebar);\n","import { Pane, Heading } from \"evergreen-ui\";\nimport { observer } from \"mobx-react-lite\"; // may not need it\n\nexport const Navbar = () => (\n  <Pane\n    width=\"100%\"\n    height=\"50px\"\n    display=\"flex\"\n    flexDirection=\"row\"\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    paddingLeft=\"20px\"\n    paddingRight=\"20px\"\n    paddingTop=\"10px\"\n    paddingBottom=\"10px\"\n    backgroundColor=\"#012548\"\n  >\n    <Heading color=\"white\">BeaterList</Heading>\n  </Pane>\n);\nexport default observer(Navbar);\n","import { beatSaverBrowserStore } from \"../stores/beatSaver\";\nimport { playlistStore } from \"../stores/playlists\";\n\nexport const onDragEnd = ({ destination, source }) => {\n  // the only one that is required\n  console.log(destination, source);\n  if (!destination || !source) {\n    return;\n  }\n  const destIdx = destination.index;\n  const sourceIdx = source.index;\n\n  // beat saver browser logic\n  if (source.droppableId === \"BEAT_SAVER_BROWSER\") {\n    const destinationPlaylist = playlistStore.playlists.find(\n      (p) => p.id === destination.droppableId\n    );\n    const songToAdd = beatSaverBrowserStore.songsList[source.index];\n    console.log(\"hiyaya\", songToAdd.hash);\n    destinationPlaylist.addSongBySongData(songToAdd, destIdx);\n    playlistStore.saveAllPlaylists();\n    return;\n  }\n\n  // playlists reordering logic\n  if (\n    source.droppableId === \"playlists\" &&\n    destination.droppableId === \"playlists\"\n  ) {\n    const playlistToMove = playlistStore.playlists[source.index];\n    playlistStore.movePlaylist(playlistToMove, destination.index);\n    return;\n  }\n\n  if (destination.droppableId === source.droppableId && destIdx === sourceIdx) {\n    return;\n  }\n\n  // droppableId are playlist unique ids\n  // very kludgey, should use some id?\n  const sourcePlaylist = playlistStore.playlists.find(\n    (p) => p.id === source.droppableId\n  );\n  // move within list\n  if (destination.droppableId === source.droppableId) {\n    const songToMove = sourcePlaylist.songs[sourceIdx];\n    sourcePlaylist.removeSong(songToMove); // could be optimized, currently does extra search\n    sourcePlaylist.insertSongAtIdx(songToMove, destIdx);\n    console.log(\"moving within\", songToMove, sourceIdx, destIdx);\n  } else {\n    // move across list\n    const destinationPlaylist = playlistStore.playlists.find(\n      (p) => p.id === destination.droppableId\n    );\n    const songToMove = sourcePlaylist.songs[sourceIdx];\n    sourcePlaylist.removeSong(songToMove);\n    destinationPlaylist.insertSongAtIdx(songToMove, destIdx);\n  }\n  playlistStore.saveAllPlaylists();\n};\n","import { observer } from \"mobx-react-lite\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nimport { Pane } from \"evergreen-ui\";\nimport PlaylistsContainer from \"./components/PlaylistsContainer\";\nimport BeatSaverBrowser from \"./components/BeatSaverBrowser\";\nimport Sidebar from \"./components/Sidebar\";\nimport TopNavbar from \"./components/TopNavbar\";\n\nimport { onDragEnd } from \"./controllers/dragAndDrop\";\n\n// TodO:\n// persist config\n// delete playlist?\n// create playlists\n// add songs by hash?\n// playlist import to persist playlist\n// list to list exchanges\n// image for new playlist\n// placeholder for empty playlist\n// playlist title edit collision check\n// (import will need to do replacement checks)\n\n// load in playlist browser (beat saver), to drag playlists in\n// more columns, beautified difficulties\n\nconst App = () => {\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      //justifyContent=\"center\"\n      border=\"default\"\n    >\n      <TopNavbar />\n      <div\n        style={{\n          width: \"100%\",\n          flexDirection: \"row\",\n          display: \"flex\",\n        }}\n      >\n        <Pane minWidth=\"300px\" padding={30}>\n          <Sidebar />\n        </Pane>\n\n        <DragDropContext onDragEnd={onDragEnd}>\n          <BeatSaverBrowser />\n          <PlaylistsContainer />\n        </DragDropContext>\n      </div>\n    </Pane>\n  );\n};\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { PlaylistStoreContext, playlistStore } from \"./stores/playlists\";\nimport {\n  UserPreferencesContext,\n  userPreferencesStore,\n} from \"./stores/preferences\";\nimport {\n  BeatSaverBrowserStoreContext,\n  beatSaverBrowserStore,\n} from \"./stores/beatSaver\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlaylistStoreContext.Provider value={playlistStore}>\n      <BeatSaverBrowserStoreContext.Provider value={beatSaverBrowserStore}>\n        <UserPreferencesContext.Provider value={userPreferencesStore}>\n          <App />\n        </UserPreferencesContext.Provider>\n      </BeatSaverBrowserStoreContext.Provider>\n    </PlaylistStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}